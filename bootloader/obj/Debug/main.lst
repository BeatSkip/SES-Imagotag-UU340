                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _jmp_vector
                                     12 	.globl _bootloader
                                     13 	.globl __sdcc_external_startup
                                     14 	.globl __sdcc_gsinit_startup
                                     15 	.globl _crc_crc16
                                     16 	.globl _flash_apply_calibration
                                     17 	.globl _flash_lock
                                     18 	.globl _flash_unlock
                                     19 	.globl _uart0_writehex16
                                     20 	.globl _uart0_writenum16
                                     21 	.globl _uart0_writestr
                                     22 	.globl _uart0_tx
                                     23 	.globl _uart0_rx
                                     24 	.globl _uart0_wait_txfree
                                     25 	.globl _uart0_init
                                     26 	.globl _uart0_rxadvance
                                     27 	.globl _uart0_rxcount
                                     28 	.globl _uart0_poll
                                     29 	.globl _uart_timer0_baud
                                     30 	.globl _enter_standby
                                     31 	.globl _PORTC_7
                                     32 	.globl _PORTC_6
                                     33 	.globl _PORTC_5
                                     34 	.globl _PORTC_4
                                     35 	.globl _PORTC_3
                                     36 	.globl _PORTC_2
                                     37 	.globl _PORTC_1
                                     38 	.globl _PORTC_0
                                     39 	.globl _PORTB_7
                                     40 	.globl _PORTB_6
                                     41 	.globl _PORTB_5
                                     42 	.globl _PORTB_4
                                     43 	.globl _PORTB_3
                                     44 	.globl _PORTB_2
                                     45 	.globl _PORTB_1
                                     46 	.globl _PORTB_0
                                     47 	.globl _PORTA_7
                                     48 	.globl _PORTA_6
                                     49 	.globl _PORTA_5
                                     50 	.globl _PORTA_4
                                     51 	.globl _PORTA_3
                                     52 	.globl _PORTA_2
                                     53 	.globl _PORTA_1
                                     54 	.globl _PORTA_0
                                     55 	.globl _PINC_7
                                     56 	.globl _PINC_6
                                     57 	.globl _PINC_5
                                     58 	.globl _PINC_4
                                     59 	.globl _PINC_3
                                     60 	.globl _PINC_2
                                     61 	.globl _PINC_1
                                     62 	.globl _PINC_0
                                     63 	.globl _PINB_7
                                     64 	.globl _PINB_6
                                     65 	.globl _PINB_5
                                     66 	.globl _PINB_4
                                     67 	.globl _PINB_3
                                     68 	.globl _PINB_2
                                     69 	.globl _PINB_1
                                     70 	.globl _PINB_0
                                     71 	.globl _PINA_7
                                     72 	.globl _PINA_6
                                     73 	.globl _PINA_5
                                     74 	.globl _PINA_4
                                     75 	.globl _PINA_3
                                     76 	.globl _PINA_2
                                     77 	.globl _PINA_1
                                     78 	.globl _PINA_0
                                     79 	.globl _CY
                                     80 	.globl _AC
                                     81 	.globl _F0
                                     82 	.globl _RS1
                                     83 	.globl _RS0
                                     84 	.globl _OV
                                     85 	.globl _F1
                                     86 	.globl _P
                                     87 	.globl _IP_7
                                     88 	.globl _IP_6
                                     89 	.globl _IP_5
                                     90 	.globl _IP_4
                                     91 	.globl _IP_3
                                     92 	.globl _IP_2
                                     93 	.globl _IP_1
                                     94 	.globl _IP_0
                                     95 	.globl _EA
                                     96 	.globl _IE_7
                                     97 	.globl _IE_6
                                     98 	.globl _IE_5
                                     99 	.globl _IE_4
                                    100 	.globl _IE_3
                                    101 	.globl _IE_2
                                    102 	.globl _IE_1
                                    103 	.globl _IE_0
                                    104 	.globl _EIP_7
                                    105 	.globl _EIP_6
                                    106 	.globl _EIP_5
                                    107 	.globl _EIP_4
                                    108 	.globl _EIP_3
                                    109 	.globl _EIP_2
                                    110 	.globl _EIP_1
                                    111 	.globl _EIP_0
                                    112 	.globl _EIE_7
                                    113 	.globl _EIE_6
                                    114 	.globl _EIE_5
                                    115 	.globl _EIE_4
                                    116 	.globl _EIE_3
                                    117 	.globl _EIE_2
                                    118 	.globl _EIE_1
                                    119 	.globl _EIE_0
                                    120 	.globl _E2IP_7
                                    121 	.globl _E2IP_6
                                    122 	.globl _E2IP_5
                                    123 	.globl _E2IP_4
                                    124 	.globl _E2IP_3
                                    125 	.globl _E2IP_2
                                    126 	.globl _E2IP_1
                                    127 	.globl _E2IP_0
                                    128 	.globl _E2IE_7
                                    129 	.globl _E2IE_6
                                    130 	.globl _E2IE_5
                                    131 	.globl _E2IE_4
                                    132 	.globl _E2IE_3
                                    133 	.globl _E2IE_2
                                    134 	.globl _E2IE_1
                                    135 	.globl _E2IE_0
                                    136 	.globl _B_7
                                    137 	.globl _B_6
                                    138 	.globl _B_5
                                    139 	.globl _B_4
                                    140 	.globl _B_3
                                    141 	.globl _B_2
                                    142 	.globl _B_1
                                    143 	.globl _B_0
                                    144 	.globl _ACC_7
                                    145 	.globl _ACC_6
                                    146 	.globl _ACC_5
                                    147 	.globl _ACC_4
                                    148 	.globl _ACC_3
                                    149 	.globl _ACC_2
                                    150 	.globl _ACC_1
                                    151 	.globl _ACC_0
                                    152 	.globl _WTSTAT
                                    153 	.globl _WTIRQEN
                                    154 	.globl _WTEVTD
                                    155 	.globl _WTEVTD1
                                    156 	.globl _WTEVTD0
                                    157 	.globl _WTEVTC
                                    158 	.globl _WTEVTC1
                                    159 	.globl _WTEVTC0
                                    160 	.globl _WTEVTB
                                    161 	.globl _WTEVTB1
                                    162 	.globl _WTEVTB0
                                    163 	.globl _WTEVTA
                                    164 	.globl _WTEVTA1
                                    165 	.globl _WTEVTA0
                                    166 	.globl _WTCNTR1
                                    167 	.globl _WTCNTB
                                    168 	.globl _WTCNTB1
                                    169 	.globl _WTCNTB0
                                    170 	.globl _WTCNTA
                                    171 	.globl _WTCNTA1
                                    172 	.globl _WTCNTA0
                                    173 	.globl _WTCFGB
                                    174 	.globl _WTCFGA
                                    175 	.globl _WDTRESET
                                    176 	.globl _WDTCFG
                                    177 	.globl _U1STATUS
                                    178 	.globl _U1SHREG
                                    179 	.globl _U1MODE
                                    180 	.globl _U1CTRL
                                    181 	.globl _U0STATUS
                                    182 	.globl _U0SHREG
                                    183 	.globl _U0MODE
                                    184 	.globl _U0CTRL
                                    185 	.globl _T2STATUS
                                    186 	.globl _T2PERIOD
                                    187 	.globl _T2PERIOD1
                                    188 	.globl _T2PERIOD0
                                    189 	.globl _T2MODE
                                    190 	.globl _T2CNT
                                    191 	.globl _T2CNT1
                                    192 	.globl _T2CNT0
                                    193 	.globl _T2CLKSRC
                                    194 	.globl _T1STATUS
                                    195 	.globl _T1PERIOD
                                    196 	.globl _T1PERIOD1
                                    197 	.globl _T1PERIOD0
                                    198 	.globl _T1MODE
                                    199 	.globl _T1CNT
                                    200 	.globl _T1CNT1
                                    201 	.globl _T1CNT0
                                    202 	.globl _T1CLKSRC
                                    203 	.globl _T0STATUS
                                    204 	.globl _T0PERIOD
                                    205 	.globl _T0PERIOD1
                                    206 	.globl _T0PERIOD0
                                    207 	.globl _T0MODE
                                    208 	.globl _T0CNT
                                    209 	.globl _T0CNT1
                                    210 	.globl _T0CNT0
                                    211 	.globl _T0CLKSRC
                                    212 	.globl _SPSTATUS
                                    213 	.globl _SPSHREG
                                    214 	.globl _SPMODE
                                    215 	.globl _SPCLKSRC
                                    216 	.globl _RADIOSTAT
                                    217 	.globl _RADIOSTAT1
                                    218 	.globl _RADIOSTAT0
                                    219 	.globl _RADIODATA
                                    220 	.globl _RADIODATA3
                                    221 	.globl _RADIODATA2
                                    222 	.globl _RADIODATA1
                                    223 	.globl _RADIODATA0
                                    224 	.globl _RADIOADDR
                                    225 	.globl _RADIOADDR1
                                    226 	.globl _RADIOADDR0
                                    227 	.globl _RADIOACC
                                    228 	.globl _OC1STATUS
                                    229 	.globl _OC1PIN
                                    230 	.globl _OC1MODE
                                    231 	.globl _OC1COMP
                                    232 	.globl _OC1COMP1
                                    233 	.globl _OC1COMP0
                                    234 	.globl _OC0STATUS
                                    235 	.globl _OC0PIN
                                    236 	.globl _OC0MODE
                                    237 	.globl _OC0COMP
                                    238 	.globl _OC0COMP1
                                    239 	.globl _OC0COMP0
                                    240 	.globl _NVSTATUS
                                    241 	.globl _NVKEY
                                    242 	.globl _NVDATA
                                    243 	.globl _NVDATA1
                                    244 	.globl _NVDATA0
                                    245 	.globl _NVADDR
                                    246 	.globl _NVADDR1
                                    247 	.globl _NVADDR0
                                    248 	.globl _IC1STATUS
                                    249 	.globl _IC1MODE
                                    250 	.globl _IC1CAPT
                                    251 	.globl _IC1CAPT1
                                    252 	.globl _IC1CAPT0
                                    253 	.globl _IC0STATUS
                                    254 	.globl _IC0MODE
                                    255 	.globl _IC0CAPT
                                    256 	.globl _IC0CAPT1
                                    257 	.globl _IC0CAPT0
                                    258 	.globl _PORTR
                                    259 	.globl _PORTC
                                    260 	.globl _PORTB
                                    261 	.globl _PORTA
                                    262 	.globl _PINR
                                    263 	.globl _PINC
                                    264 	.globl _PINB
                                    265 	.globl _PINA
                                    266 	.globl _DIRR
                                    267 	.globl _DIRC
                                    268 	.globl _DIRB
                                    269 	.globl _DIRA
                                    270 	.globl _DBGLNKSTAT
                                    271 	.globl _DBGLNKBUF
                                    272 	.globl _CODECONFIG
                                    273 	.globl _CLKSTAT
                                    274 	.globl _CLKCON
                                    275 	.globl _ANALOGCOMP
                                    276 	.globl _ADCCONV
                                    277 	.globl _ADCCLKSRC
                                    278 	.globl _ADCCH3CONFIG
                                    279 	.globl _ADCCH2CONFIG
                                    280 	.globl _ADCCH1CONFIG
                                    281 	.globl _ADCCH0CONFIG
                                    282 	.globl __XPAGE
                                    283 	.globl _XPAGE
                                    284 	.globl _SP
                                    285 	.globl _PSW
                                    286 	.globl _PCON
                                    287 	.globl _IP
                                    288 	.globl _IE
                                    289 	.globl _EIP
                                    290 	.globl _EIE
                                    291 	.globl _E2IP
                                    292 	.globl _E2IE
                                    293 	.globl _DPS
                                    294 	.globl _DPTR1
                                    295 	.globl _DPTR0
                                    296 	.globl _DPL1
                                    297 	.globl _DPL
                                    298 	.globl _DPH1
                                    299 	.globl _DPH
                                    300 	.globl _B
                                    301 	.globl _ACC
                                    302 	.globl _line_buffer
                                    303 	.globl _orig_jmp_vector_mask
                                    304 	.globl _orig_jmp_vector
                                    305 	.globl _XTALREADY
                                    306 	.globl _XTALOSC
                                    307 	.globl _XTALAMPL
                                    308 	.globl _SILICONREV
                                    309 	.globl _SCRATCH3
                                    310 	.globl _SCRATCH2
                                    311 	.globl _SCRATCH1
                                    312 	.globl _SCRATCH0
                                    313 	.globl _RADIOMUX
                                    314 	.globl _RADIOFSTATADDR
                                    315 	.globl _RADIOFSTATADDR1
                                    316 	.globl _RADIOFSTATADDR0
                                    317 	.globl _RADIOFDATAADDR
                                    318 	.globl _RADIOFDATAADDR1
                                    319 	.globl _RADIOFDATAADDR0
                                    320 	.globl _OSCRUN
                                    321 	.globl _OSCREADY
                                    322 	.globl _OSCFORCERUN
                                    323 	.globl _OSCCALIB
                                    324 	.globl _MISCCTRL
                                    325 	.globl _LPXOSCGM
                                    326 	.globl _LPOSCREF
                                    327 	.globl _LPOSCREF1
                                    328 	.globl _LPOSCREF0
                                    329 	.globl _LPOSCPER
                                    330 	.globl _LPOSCPER1
                                    331 	.globl _LPOSCPER0
                                    332 	.globl _LPOSCKFILT
                                    333 	.globl _LPOSCKFILT1
                                    334 	.globl _LPOSCKFILT0
                                    335 	.globl _LPOSCFREQ
                                    336 	.globl _LPOSCFREQ1
                                    337 	.globl _LPOSCFREQ0
                                    338 	.globl _LPOSCCONFIG
                                    339 	.globl _PINSEL
                                    340 	.globl _PINCHGC
                                    341 	.globl _PINCHGB
                                    342 	.globl _PINCHGA
                                    343 	.globl _PALTRADIO
                                    344 	.globl _PALTC
                                    345 	.globl _PALTB
                                    346 	.globl _PALTA
                                    347 	.globl _INTCHGC
                                    348 	.globl _INTCHGB
                                    349 	.globl _INTCHGA
                                    350 	.globl _EXTIRQ
                                    351 	.globl _GPIOENABLE
                                    352 	.globl _ANALOGA
                                    353 	.globl _FRCOSCREF
                                    354 	.globl _FRCOSCREF1
                                    355 	.globl _FRCOSCREF0
                                    356 	.globl _FRCOSCPER
                                    357 	.globl _FRCOSCPER1
                                    358 	.globl _FRCOSCPER0
                                    359 	.globl _FRCOSCKFILT
                                    360 	.globl _FRCOSCKFILT1
                                    361 	.globl _FRCOSCKFILT0
                                    362 	.globl _FRCOSCFREQ
                                    363 	.globl _FRCOSCFREQ1
                                    364 	.globl _FRCOSCFREQ0
                                    365 	.globl _FRCOSCCTRL
                                    366 	.globl _FRCOSCCONFIG
                                    367 	.globl _DMA1CONFIG
                                    368 	.globl _DMA1ADDR
                                    369 	.globl _DMA1ADDR1
                                    370 	.globl _DMA1ADDR0
                                    371 	.globl _DMA0CONFIG
                                    372 	.globl _DMA0ADDR
                                    373 	.globl _DMA0ADDR1
                                    374 	.globl _DMA0ADDR0
                                    375 	.globl _ADCTUNE2
                                    376 	.globl _ADCTUNE1
                                    377 	.globl _ADCTUNE0
                                    378 	.globl _ADCCH3VAL
                                    379 	.globl _ADCCH3VAL1
                                    380 	.globl _ADCCH3VAL0
                                    381 	.globl _ADCCH2VAL
                                    382 	.globl _ADCCH2VAL1
                                    383 	.globl _ADCCH2VAL0
                                    384 	.globl _ADCCH1VAL
                                    385 	.globl _ADCCH1VAL1
                                    386 	.globl _ADCCH1VAL0
                                    387 	.globl _ADCCH0VAL
                                    388 	.globl _ADCCH0VAL1
                                    389 	.globl _ADCCH0VAL0
                                    390 ;--------------------------------------------------------
                                    391 ; special function registers
                                    392 ;--------------------------------------------------------
                                    393 	.area RSEG    (ABS,DATA)
      000000                        394 	.org 0x0000
                           0000E0   395 G$ACC$0$0 == 0x00e0
                           0000E0   396 _ACC	=	0x00e0
                           0000F0   397 G$B$0$0 == 0x00f0
                           0000F0   398 _B	=	0x00f0
                           000083   399 G$DPH$0$0 == 0x0083
                           000083   400 _DPH	=	0x0083
                           000085   401 G$DPH1$0$0 == 0x0085
                           000085   402 _DPH1	=	0x0085
                           000082   403 G$DPL$0$0 == 0x0082
                           000082   404 _DPL	=	0x0082
                           000084   405 G$DPL1$0$0 == 0x0084
                           000084   406 _DPL1	=	0x0084
                           008382   407 G$DPTR0$0$0 == 0x8382
                           008382   408 _DPTR0	=	0x8382
                           008584   409 G$DPTR1$0$0 == 0x8584
                           008584   410 _DPTR1	=	0x8584
                           000086   411 G$DPS$0$0 == 0x0086
                           000086   412 _DPS	=	0x0086
                           0000A0   413 G$E2IE$0$0 == 0x00a0
                           0000A0   414 _E2IE	=	0x00a0
                           0000C0   415 G$E2IP$0$0 == 0x00c0
                           0000C0   416 _E2IP	=	0x00c0
                           000098   417 G$EIE$0$0 == 0x0098
                           000098   418 _EIE	=	0x0098
                           0000B0   419 G$EIP$0$0 == 0x00b0
                           0000B0   420 _EIP	=	0x00b0
                           0000A8   421 G$IE$0$0 == 0x00a8
                           0000A8   422 _IE	=	0x00a8
                           0000B8   423 G$IP$0$0 == 0x00b8
                           0000B8   424 _IP	=	0x00b8
                           000087   425 G$PCON$0$0 == 0x0087
                           000087   426 _PCON	=	0x0087
                           0000D0   427 G$PSW$0$0 == 0x00d0
                           0000D0   428 _PSW	=	0x00d0
                           000081   429 G$SP$0$0 == 0x0081
                           000081   430 _SP	=	0x0081
                           0000D9   431 G$XPAGE$0$0 == 0x00d9
                           0000D9   432 _XPAGE	=	0x00d9
                           0000D9   433 G$_XPAGE$0$0 == 0x00d9
                           0000D9   434 __XPAGE	=	0x00d9
                           0000CA   435 G$ADCCH0CONFIG$0$0 == 0x00ca
                           0000CA   436 _ADCCH0CONFIG	=	0x00ca
                           0000CB   437 G$ADCCH1CONFIG$0$0 == 0x00cb
                           0000CB   438 _ADCCH1CONFIG	=	0x00cb
                           0000D2   439 G$ADCCH2CONFIG$0$0 == 0x00d2
                           0000D2   440 _ADCCH2CONFIG	=	0x00d2
                           0000D3   441 G$ADCCH3CONFIG$0$0 == 0x00d3
                           0000D3   442 _ADCCH3CONFIG	=	0x00d3
                           0000D1   443 G$ADCCLKSRC$0$0 == 0x00d1
                           0000D1   444 _ADCCLKSRC	=	0x00d1
                           0000C9   445 G$ADCCONV$0$0 == 0x00c9
                           0000C9   446 _ADCCONV	=	0x00c9
                           0000E1   447 G$ANALOGCOMP$0$0 == 0x00e1
                           0000E1   448 _ANALOGCOMP	=	0x00e1
                           0000C6   449 G$CLKCON$0$0 == 0x00c6
                           0000C6   450 _CLKCON	=	0x00c6
                           0000C7   451 G$CLKSTAT$0$0 == 0x00c7
                           0000C7   452 _CLKSTAT	=	0x00c7
                           000097   453 G$CODECONFIG$0$0 == 0x0097
                           000097   454 _CODECONFIG	=	0x0097
                           0000E3   455 G$DBGLNKBUF$0$0 == 0x00e3
                           0000E3   456 _DBGLNKBUF	=	0x00e3
                           0000E2   457 G$DBGLNKSTAT$0$0 == 0x00e2
                           0000E2   458 _DBGLNKSTAT	=	0x00e2
                           000089   459 G$DIRA$0$0 == 0x0089
                           000089   460 _DIRA	=	0x0089
                           00008A   461 G$DIRB$0$0 == 0x008a
                           00008A   462 _DIRB	=	0x008a
                           00008B   463 G$DIRC$0$0 == 0x008b
                           00008B   464 _DIRC	=	0x008b
                           00008E   465 G$DIRR$0$0 == 0x008e
                           00008E   466 _DIRR	=	0x008e
                           0000C8   467 G$PINA$0$0 == 0x00c8
                           0000C8   468 _PINA	=	0x00c8
                           0000E8   469 G$PINB$0$0 == 0x00e8
                           0000E8   470 _PINB	=	0x00e8
                           0000F8   471 G$PINC$0$0 == 0x00f8
                           0000F8   472 _PINC	=	0x00f8
                           00008D   473 G$PINR$0$0 == 0x008d
                           00008D   474 _PINR	=	0x008d
                           000080   475 G$PORTA$0$0 == 0x0080
                           000080   476 _PORTA	=	0x0080
                           000088   477 G$PORTB$0$0 == 0x0088
                           000088   478 _PORTB	=	0x0088
                           000090   479 G$PORTC$0$0 == 0x0090
                           000090   480 _PORTC	=	0x0090
                           00008C   481 G$PORTR$0$0 == 0x008c
                           00008C   482 _PORTR	=	0x008c
                           0000CE   483 G$IC0CAPT0$0$0 == 0x00ce
                           0000CE   484 _IC0CAPT0	=	0x00ce
                           0000CF   485 G$IC0CAPT1$0$0 == 0x00cf
                           0000CF   486 _IC0CAPT1	=	0x00cf
                           00CFCE   487 G$IC0CAPT$0$0 == 0xcfce
                           00CFCE   488 _IC0CAPT	=	0xcfce
                           0000CC   489 G$IC0MODE$0$0 == 0x00cc
                           0000CC   490 _IC0MODE	=	0x00cc
                           0000CD   491 G$IC0STATUS$0$0 == 0x00cd
                           0000CD   492 _IC0STATUS	=	0x00cd
                           0000D6   493 G$IC1CAPT0$0$0 == 0x00d6
                           0000D6   494 _IC1CAPT0	=	0x00d6
                           0000D7   495 G$IC1CAPT1$0$0 == 0x00d7
                           0000D7   496 _IC1CAPT1	=	0x00d7
                           00D7D6   497 G$IC1CAPT$0$0 == 0xd7d6
                           00D7D6   498 _IC1CAPT	=	0xd7d6
                           0000D4   499 G$IC1MODE$0$0 == 0x00d4
                           0000D4   500 _IC1MODE	=	0x00d4
                           0000D5   501 G$IC1STATUS$0$0 == 0x00d5
                           0000D5   502 _IC1STATUS	=	0x00d5
                           000092   503 G$NVADDR0$0$0 == 0x0092
                           000092   504 _NVADDR0	=	0x0092
                           000093   505 G$NVADDR1$0$0 == 0x0093
                           000093   506 _NVADDR1	=	0x0093
                           009392   507 G$NVADDR$0$0 == 0x9392
                           009392   508 _NVADDR	=	0x9392
                           000094   509 G$NVDATA0$0$0 == 0x0094
                           000094   510 _NVDATA0	=	0x0094
                           000095   511 G$NVDATA1$0$0 == 0x0095
                           000095   512 _NVDATA1	=	0x0095
                           009594   513 G$NVDATA$0$0 == 0x9594
                           009594   514 _NVDATA	=	0x9594
                           000096   515 G$NVKEY$0$0 == 0x0096
                           000096   516 _NVKEY	=	0x0096
                           000091   517 G$NVSTATUS$0$0 == 0x0091
                           000091   518 _NVSTATUS	=	0x0091
                           0000BC   519 G$OC0COMP0$0$0 == 0x00bc
                           0000BC   520 _OC0COMP0	=	0x00bc
                           0000BD   521 G$OC0COMP1$0$0 == 0x00bd
                           0000BD   522 _OC0COMP1	=	0x00bd
                           00BDBC   523 G$OC0COMP$0$0 == 0xbdbc
                           00BDBC   524 _OC0COMP	=	0xbdbc
                           0000B9   525 G$OC0MODE$0$0 == 0x00b9
                           0000B9   526 _OC0MODE	=	0x00b9
                           0000BA   527 G$OC0PIN$0$0 == 0x00ba
                           0000BA   528 _OC0PIN	=	0x00ba
                           0000BB   529 G$OC0STATUS$0$0 == 0x00bb
                           0000BB   530 _OC0STATUS	=	0x00bb
                           0000C4   531 G$OC1COMP0$0$0 == 0x00c4
                           0000C4   532 _OC1COMP0	=	0x00c4
                           0000C5   533 G$OC1COMP1$0$0 == 0x00c5
                           0000C5   534 _OC1COMP1	=	0x00c5
                           00C5C4   535 G$OC1COMP$0$0 == 0xc5c4
                           00C5C4   536 _OC1COMP	=	0xc5c4
                           0000C1   537 G$OC1MODE$0$0 == 0x00c1
                           0000C1   538 _OC1MODE	=	0x00c1
                           0000C2   539 G$OC1PIN$0$0 == 0x00c2
                           0000C2   540 _OC1PIN	=	0x00c2
                           0000C3   541 G$OC1STATUS$0$0 == 0x00c3
                           0000C3   542 _OC1STATUS	=	0x00c3
                           0000B1   543 G$RADIOACC$0$0 == 0x00b1
                           0000B1   544 _RADIOACC	=	0x00b1
                           0000B3   545 G$RADIOADDR0$0$0 == 0x00b3
                           0000B3   546 _RADIOADDR0	=	0x00b3
                           0000B2   547 G$RADIOADDR1$0$0 == 0x00b2
                           0000B2   548 _RADIOADDR1	=	0x00b2
                           00B2B3   549 G$RADIOADDR$0$0 == 0xb2b3
                           00B2B3   550 _RADIOADDR	=	0xb2b3
                           0000B7   551 G$RADIODATA0$0$0 == 0x00b7
                           0000B7   552 _RADIODATA0	=	0x00b7
                           0000B6   553 G$RADIODATA1$0$0 == 0x00b6
                           0000B6   554 _RADIODATA1	=	0x00b6
                           0000B5   555 G$RADIODATA2$0$0 == 0x00b5
                           0000B5   556 _RADIODATA2	=	0x00b5
                           0000B4   557 G$RADIODATA3$0$0 == 0x00b4
                           0000B4   558 _RADIODATA3	=	0x00b4
                           B4B5B6B7   559 G$RADIODATA$0$0 == 0xb4b5b6b7
                           B4B5B6B7   560 _RADIODATA	=	0xb4b5b6b7
                           0000BE   561 G$RADIOSTAT0$0$0 == 0x00be
                           0000BE   562 _RADIOSTAT0	=	0x00be
                           0000BF   563 G$RADIOSTAT1$0$0 == 0x00bf
                           0000BF   564 _RADIOSTAT1	=	0x00bf
                           00BFBE   565 G$RADIOSTAT$0$0 == 0xbfbe
                           00BFBE   566 _RADIOSTAT	=	0xbfbe
                           0000DF   567 G$SPCLKSRC$0$0 == 0x00df
                           0000DF   568 _SPCLKSRC	=	0x00df
                           0000DC   569 G$SPMODE$0$0 == 0x00dc
                           0000DC   570 _SPMODE	=	0x00dc
                           0000DE   571 G$SPSHREG$0$0 == 0x00de
                           0000DE   572 _SPSHREG	=	0x00de
                           0000DD   573 G$SPSTATUS$0$0 == 0x00dd
                           0000DD   574 _SPSTATUS	=	0x00dd
                           00009A   575 G$T0CLKSRC$0$0 == 0x009a
                           00009A   576 _T0CLKSRC	=	0x009a
                           00009C   577 G$T0CNT0$0$0 == 0x009c
                           00009C   578 _T0CNT0	=	0x009c
                           00009D   579 G$T0CNT1$0$0 == 0x009d
                           00009D   580 _T0CNT1	=	0x009d
                           009D9C   581 G$T0CNT$0$0 == 0x9d9c
                           009D9C   582 _T0CNT	=	0x9d9c
                           000099   583 G$T0MODE$0$0 == 0x0099
                           000099   584 _T0MODE	=	0x0099
                           00009E   585 G$T0PERIOD0$0$0 == 0x009e
                           00009E   586 _T0PERIOD0	=	0x009e
                           00009F   587 G$T0PERIOD1$0$0 == 0x009f
                           00009F   588 _T0PERIOD1	=	0x009f
                           009F9E   589 G$T0PERIOD$0$0 == 0x9f9e
                           009F9E   590 _T0PERIOD	=	0x9f9e
                           00009B   591 G$T0STATUS$0$0 == 0x009b
                           00009B   592 _T0STATUS	=	0x009b
                           0000A2   593 G$T1CLKSRC$0$0 == 0x00a2
                           0000A2   594 _T1CLKSRC	=	0x00a2
                           0000A4   595 G$T1CNT0$0$0 == 0x00a4
                           0000A4   596 _T1CNT0	=	0x00a4
                           0000A5   597 G$T1CNT1$0$0 == 0x00a5
                           0000A5   598 _T1CNT1	=	0x00a5
                           00A5A4   599 G$T1CNT$0$0 == 0xa5a4
                           00A5A4   600 _T1CNT	=	0xa5a4
                           0000A1   601 G$T1MODE$0$0 == 0x00a1
                           0000A1   602 _T1MODE	=	0x00a1
                           0000A6   603 G$T1PERIOD0$0$0 == 0x00a6
                           0000A6   604 _T1PERIOD0	=	0x00a6
                           0000A7   605 G$T1PERIOD1$0$0 == 0x00a7
                           0000A7   606 _T1PERIOD1	=	0x00a7
                           00A7A6   607 G$T1PERIOD$0$0 == 0xa7a6
                           00A7A6   608 _T1PERIOD	=	0xa7a6
                           0000A3   609 G$T1STATUS$0$0 == 0x00a3
                           0000A3   610 _T1STATUS	=	0x00a3
                           0000AA   611 G$T2CLKSRC$0$0 == 0x00aa
                           0000AA   612 _T2CLKSRC	=	0x00aa
                           0000AC   613 G$T2CNT0$0$0 == 0x00ac
                           0000AC   614 _T2CNT0	=	0x00ac
                           0000AD   615 G$T2CNT1$0$0 == 0x00ad
                           0000AD   616 _T2CNT1	=	0x00ad
                           00ADAC   617 G$T2CNT$0$0 == 0xadac
                           00ADAC   618 _T2CNT	=	0xadac
                           0000A9   619 G$T2MODE$0$0 == 0x00a9
                           0000A9   620 _T2MODE	=	0x00a9
                           0000AE   621 G$T2PERIOD0$0$0 == 0x00ae
                           0000AE   622 _T2PERIOD0	=	0x00ae
                           0000AF   623 G$T2PERIOD1$0$0 == 0x00af
                           0000AF   624 _T2PERIOD1	=	0x00af
                           00AFAE   625 G$T2PERIOD$0$0 == 0xafae
                           00AFAE   626 _T2PERIOD	=	0xafae
                           0000AB   627 G$T2STATUS$0$0 == 0x00ab
                           0000AB   628 _T2STATUS	=	0x00ab
                           0000E4   629 G$U0CTRL$0$0 == 0x00e4
                           0000E4   630 _U0CTRL	=	0x00e4
                           0000E7   631 G$U0MODE$0$0 == 0x00e7
                           0000E7   632 _U0MODE	=	0x00e7
                           0000E6   633 G$U0SHREG$0$0 == 0x00e6
                           0000E6   634 _U0SHREG	=	0x00e6
                           0000E5   635 G$U0STATUS$0$0 == 0x00e5
                           0000E5   636 _U0STATUS	=	0x00e5
                           0000EC   637 G$U1CTRL$0$0 == 0x00ec
                           0000EC   638 _U1CTRL	=	0x00ec
                           0000EF   639 G$U1MODE$0$0 == 0x00ef
                           0000EF   640 _U1MODE	=	0x00ef
                           0000EE   641 G$U1SHREG$0$0 == 0x00ee
                           0000EE   642 _U1SHREG	=	0x00ee
                           0000ED   643 G$U1STATUS$0$0 == 0x00ed
                           0000ED   644 _U1STATUS	=	0x00ed
                           0000DA   645 G$WDTCFG$0$0 == 0x00da
                           0000DA   646 _WDTCFG	=	0x00da
                           0000DB   647 G$WDTRESET$0$0 == 0x00db
                           0000DB   648 _WDTRESET	=	0x00db
                           0000F1   649 G$WTCFGA$0$0 == 0x00f1
                           0000F1   650 _WTCFGA	=	0x00f1
                           0000F9   651 G$WTCFGB$0$0 == 0x00f9
                           0000F9   652 _WTCFGB	=	0x00f9
                           0000F2   653 G$WTCNTA0$0$0 == 0x00f2
                           0000F2   654 _WTCNTA0	=	0x00f2
                           0000F3   655 G$WTCNTA1$0$0 == 0x00f3
                           0000F3   656 _WTCNTA1	=	0x00f3
                           00F3F2   657 G$WTCNTA$0$0 == 0xf3f2
                           00F3F2   658 _WTCNTA	=	0xf3f2
                           0000FA   659 G$WTCNTB0$0$0 == 0x00fa
                           0000FA   660 _WTCNTB0	=	0x00fa
                           0000FB   661 G$WTCNTB1$0$0 == 0x00fb
                           0000FB   662 _WTCNTB1	=	0x00fb
                           00FBFA   663 G$WTCNTB$0$0 == 0xfbfa
                           00FBFA   664 _WTCNTB	=	0xfbfa
                           0000EB   665 G$WTCNTR1$0$0 == 0x00eb
                           0000EB   666 _WTCNTR1	=	0x00eb
                           0000F4   667 G$WTEVTA0$0$0 == 0x00f4
                           0000F4   668 _WTEVTA0	=	0x00f4
                           0000F5   669 G$WTEVTA1$0$0 == 0x00f5
                           0000F5   670 _WTEVTA1	=	0x00f5
                           00F5F4   671 G$WTEVTA$0$0 == 0xf5f4
                           00F5F4   672 _WTEVTA	=	0xf5f4
                           0000F6   673 G$WTEVTB0$0$0 == 0x00f6
                           0000F6   674 _WTEVTB0	=	0x00f6
                           0000F7   675 G$WTEVTB1$0$0 == 0x00f7
                           0000F7   676 _WTEVTB1	=	0x00f7
                           00F7F6   677 G$WTEVTB$0$0 == 0xf7f6
                           00F7F6   678 _WTEVTB	=	0xf7f6
                           0000FC   679 G$WTEVTC0$0$0 == 0x00fc
                           0000FC   680 _WTEVTC0	=	0x00fc
                           0000FD   681 G$WTEVTC1$0$0 == 0x00fd
                           0000FD   682 _WTEVTC1	=	0x00fd
                           00FDFC   683 G$WTEVTC$0$0 == 0xfdfc
                           00FDFC   684 _WTEVTC	=	0xfdfc
                           0000FE   685 G$WTEVTD0$0$0 == 0x00fe
                           0000FE   686 _WTEVTD0	=	0x00fe
                           0000FF   687 G$WTEVTD1$0$0 == 0x00ff
                           0000FF   688 _WTEVTD1	=	0x00ff
                           00FFFE   689 G$WTEVTD$0$0 == 0xfffe
                           00FFFE   690 _WTEVTD	=	0xfffe
                           0000E9   691 G$WTIRQEN$0$0 == 0x00e9
                           0000E9   692 _WTIRQEN	=	0x00e9
                           0000EA   693 G$WTSTAT$0$0 == 0x00ea
                           0000EA   694 _WTSTAT	=	0x00ea
                                    695 ;--------------------------------------------------------
                                    696 ; special function bits
                                    697 ;--------------------------------------------------------
                                    698 	.area RSEG    (ABS,DATA)
      000000                        699 	.org 0x0000
                           0000E0   700 G$ACC_0$0$0 == 0x00e0
                           0000E0   701 _ACC_0	=	0x00e0
                           0000E1   702 G$ACC_1$0$0 == 0x00e1
                           0000E1   703 _ACC_1	=	0x00e1
                           0000E2   704 G$ACC_2$0$0 == 0x00e2
                           0000E2   705 _ACC_2	=	0x00e2
                           0000E3   706 G$ACC_3$0$0 == 0x00e3
                           0000E3   707 _ACC_3	=	0x00e3
                           0000E4   708 G$ACC_4$0$0 == 0x00e4
                           0000E4   709 _ACC_4	=	0x00e4
                           0000E5   710 G$ACC_5$0$0 == 0x00e5
                           0000E5   711 _ACC_5	=	0x00e5
                           0000E6   712 G$ACC_6$0$0 == 0x00e6
                           0000E6   713 _ACC_6	=	0x00e6
                           0000E7   714 G$ACC_7$0$0 == 0x00e7
                           0000E7   715 _ACC_7	=	0x00e7
                           0000F0   716 G$B_0$0$0 == 0x00f0
                           0000F0   717 _B_0	=	0x00f0
                           0000F1   718 G$B_1$0$0 == 0x00f1
                           0000F1   719 _B_1	=	0x00f1
                           0000F2   720 G$B_2$0$0 == 0x00f2
                           0000F2   721 _B_2	=	0x00f2
                           0000F3   722 G$B_3$0$0 == 0x00f3
                           0000F3   723 _B_3	=	0x00f3
                           0000F4   724 G$B_4$0$0 == 0x00f4
                           0000F4   725 _B_4	=	0x00f4
                           0000F5   726 G$B_5$0$0 == 0x00f5
                           0000F5   727 _B_5	=	0x00f5
                           0000F6   728 G$B_6$0$0 == 0x00f6
                           0000F6   729 _B_6	=	0x00f6
                           0000F7   730 G$B_7$0$0 == 0x00f7
                           0000F7   731 _B_7	=	0x00f7
                           0000A0   732 G$E2IE_0$0$0 == 0x00a0
                           0000A0   733 _E2IE_0	=	0x00a0
                           0000A1   734 G$E2IE_1$0$0 == 0x00a1
                           0000A1   735 _E2IE_1	=	0x00a1
                           0000A2   736 G$E2IE_2$0$0 == 0x00a2
                           0000A2   737 _E2IE_2	=	0x00a2
                           0000A3   738 G$E2IE_3$0$0 == 0x00a3
                           0000A3   739 _E2IE_3	=	0x00a3
                           0000A4   740 G$E2IE_4$0$0 == 0x00a4
                           0000A4   741 _E2IE_4	=	0x00a4
                           0000A5   742 G$E2IE_5$0$0 == 0x00a5
                           0000A5   743 _E2IE_5	=	0x00a5
                           0000A6   744 G$E2IE_6$0$0 == 0x00a6
                           0000A6   745 _E2IE_6	=	0x00a6
                           0000A7   746 G$E2IE_7$0$0 == 0x00a7
                           0000A7   747 _E2IE_7	=	0x00a7
                           0000C0   748 G$E2IP_0$0$0 == 0x00c0
                           0000C0   749 _E2IP_0	=	0x00c0
                           0000C1   750 G$E2IP_1$0$0 == 0x00c1
                           0000C1   751 _E2IP_1	=	0x00c1
                           0000C2   752 G$E2IP_2$0$0 == 0x00c2
                           0000C2   753 _E2IP_2	=	0x00c2
                           0000C3   754 G$E2IP_3$0$0 == 0x00c3
                           0000C3   755 _E2IP_3	=	0x00c3
                           0000C4   756 G$E2IP_4$0$0 == 0x00c4
                           0000C4   757 _E2IP_4	=	0x00c4
                           0000C5   758 G$E2IP_5$0$0 == 0x00c5
                           0000C5   759 _E2IP_5	=	0x00c5
                           0000C6   760 G$E2IP_6$0$0 == 0x00c6
                           0000C6   761 _E2IP_6	=	0x00c6
                           0000C7   762 G$E2IP_7$0$0 == 0x00c7
                           0000C7   763 _E2IP_7	=	0x00c7
                           000098   764 G$EIE_0$0$0 == 0x0098
                           000098   765 _EIE_0	=	0x0098
                           000099   766 G$EIE_1$0$0 == 0x0099
                           000099   767 _EIE_1	=	0x0099
                           00009A   768 G$EIE_2$0$0 == 0x009a
                           00009A   769 _EIE_2	=	0x009a
                           00009B   770 G$EIE_3$0$0 == 0x009b
                           00009B   771 _EIE_3	=	0x009b
                           00009C   772 G$EIE_4$0$0 == 0x009c
                           00009C   773 _EIE_4	=	0x009c
                           00009D   774 G$EIE_5$0$0 == 0x009d
                           00009D   775 _EIE_5	=	0x009d
                           00009E   776 G$EIE_6$0$0 == 0x009e
                           00009E   777 _EIE_6	=	0x009e
                           00009F   778 G$EIE_7$0$0 == 0x009f
                           00009F   779 _EIE_7	=	0x009f
                           0000B0   780 G$EIP_0$0$0 == 0x00b0
                           0000B0   781 _EIP_0	=	0x00b0
                           0000B1   782 G$EIP_1$0$0 == 0x00b1
                           0000B1   783 _EIP_1	=	0x00b1
                           0000B2   784 G$EIP_2$0$0 == 0x00b2
                           0000B2   785 _EIP_2	=	0x00b2
                           0000B3   786 G$EIP_3$0$0 == 0x00b3
                           0000B3   787 _EIP_3	=	0x00b3
                           0000B4   788 G$EIP_4$0$0 == 0x00b4
                           0000B4   789 _EIP_4	=	0x00b4
                           0000B5   790 G$EIP_5$0$0 == 0x00b5
                           0000B5   791 _EIP_5	=	0x00b5
                           0000B6   792 G$EIP_6$0$0 == 0x00b6
                           0000B6   793 _EIP_6	=	0x00b6
                           0000B7   794 G$EIP_7$0$0 == 0x00b7
                           0000B7   795 _EIP_7	=	0x00b7
                           0000A8   796 G$IE_0$0$0 == 0x00a8
                           0000A8   797 _IE_0	=	0x00a8
                           0000A9   798 G$IE_1$0$0 == 0x00a9
                           0000A9   799 _IE_1	=	0x00a9
                           0000AA   800 G$IE_2$0$0 == 0x00aa
                           0000AA   801 _IE_2	=	0x00aa
                           0000AB   802 G$IE_3$0$0 == 0x00ab
                           0000AB   803 _IE_3	=	0x00ab
                           0000AC   804 G$IE_4$0$0 == 0x00ac
                           0000AC   805 _IE_4	=	0x00ac
                           0000AD   806 G$IE_5$0$0 == 0x00ad
                           0000AD   807 _IE_5	=	0x00ad
                           0000AE   808 G$IE_6$0$0 == 0x00ae
                           0000AE   809 _IE_6	=	0x00ae
                           0000AF   810 G$IE_7$0$0 == 0x00af
                           0000AF   811 _IE_7	=	0x00af
                           0000AF   812 G$EA$0$0 == 0x00af
                           0000AF   813 _EA	=	0x00af
                           0000B8   814 G$IP_0$0$0 == 0x00b8
                           0000B8   815 _IP_0	=	0x00b8
                           0000B9   816 G$IP_1$0$0 == 0x00b9
                           0000B9   817 _IP_1	=	0x00b9
                           0000BA   818 G$IP_2$0$0 == 0x00ba
                           0000BA   819 _IP_2	=	0x00ba
                           0000BB   820 G$IP_3$0$0 == 0x00bb
                           0000BB   821 _IP_3	=	0x00bb
                           0000BC   822 G$IP_4$0$0 == 0x00bc
                           0000BC   823 _IP_4	=	0x00bc
                           0000BD   824 G$IP_5$0$0 == 0x00bd
                           0000BD   825 _IP_5	=	0x00bd
                           0000BE   826 G$IP_6$0$0 == 0x00be
                           0000BE   827 _IP_6	=	0x00be
                           0000BF   828 G$IP_7$0$0 == 0x00bf
                           0000BF   829 _IP_7	=	0x00bf
                           0000D0   830 G$P$0$0 == 0x00d0
                           0000D0   831 _P	=	0x00d0
                           0000D1   832 G$F1$0$0 == 0x00d1
                           0000D1   833 _F1	=	0x00d1
                           0000D2   834 G$OV$0$0 == 0x00d2
                           0000D2   835 _OV	=	0x00d2
                           0000D3   836 G$RS0$0$0 == 0x00d3
                           0000D3   837 _RS0	=	0x00d3
                           0000D4   838 G$RS1$0$0 == 0x00d4
                           0000D4   839 _RS1	=	0x00d4
                           0000D5   840 G$F0$0$0 == 0x00d5
                           0000D5   841 _F0	=	0x00d5
                           0000D6   842 G$AC$0$0 == 0x00d6
                           0000D6   843 _AC	=	0x00d6
                           0000D7   844 G$CY$0$0 == 0x00d7
                           0000D7   845 _CY	=	0x00d7
                           0000C8   846 G$PINA_0$0$0 == 0x00c8
                           0000C8   847 _PINA_0	=	0x00c8
                           0000C9   848 G$PINA_1$0$0 == 0x00c9
                           0000C9   849 _PINA_1	=	0x00c9
                           0000CA   850 G$PINA_2$0$0 == 0x00ca
                           0000CA   851 _PINA_2	=	0x00ca
                           0000CB   852 G$PINA_3$0$0 == 0x00cb
                           0000CB   853 _PINA_3	=	0x00cb
                           0000CC   854 G$PINA_4$0$0 == 0x00cc
                           0000CC   855 _PINA_4	=	0x00cc
                           0000CD   856 G$PINA_5$0$0 == 0x00cd
                           0000CD   857 _PINA_5	=	0x00cd
                           0000CE   858 G$PINA_6$0$0 == 0x00ce
                           0000CE   859 _PINA_6	=	0x00ce
                           0000CF   860 G$PINA_7$0$0 == 0x00cf
                           0000CF   861 _PINA_7	=	0x00cf
                           0000E8   862 G$PINB_0$0$0 == 0x00e8
                           0000E8   863 _PINB_0	=	0x00e8
                           0000E9   864 G$PINB_1$0$0 == 0x00e9
                           0000E9   865 _PINB_1	=	0x00e9
                           0000EA   866 G$PINB_2$0$0 == 0x00ea
                           0000EA   867 _PINB_2	=	0x00ea
                           0000EB   868 G$PINB_3$0$0 == 0x00eb
                           0000EB   869 _PINB_3	=	0x00eb
                           0000EC   870 G$PINB_4$0$0 == 0x00ec
                           0000EC   871 _PINB_4	=	0x00ec
                           0000ED   872 G$PINB_5$0$0 == 0x00ed
                           0000ED   873 _PINB_5	=	0x00ed
                           0000EE   874 G$PINB_6$0$0 == 0x00ee
                           0000EE   875 _PINB_6	=	0x00ee
                           0000EF   876 G$PINB_7$0$0 == 0x00ef
                           0000EF   877 _PINB_7	=	0x00ef
                           0000F8   878 G$PINC_0$0$0 == 0x00f8
                           0000F8   879 _PINC_0	=	0x00f8
                           0000F9   880 G$PINC_1$0$0 == 0x00f9
                           0000F9   881 _PINC_1	=	0x00f9
                           0000FA   882 G$PINC_2$0$0 == 0x00fa
                           0000FA   883 _PINC_2	=	0x00fa
                           0000FB   884 G$PINC_3$0$0 == 0x00fb
                           0000FB   885 _PINC_3	=	0x00fb
                           0000FC   886 G$PINC_4$0$0 == 0x00fc
                           0000FC   887 _PINC_4	=	0x00fc
                           0000FD   888 G$PINC_5$0$0 == 0x00fd
                           0000FD   889 _PINC_5	=	0x00fd
                           0000FE   890 G$PINC_6$0$0 == 0x00fe
                           0000FE   891 _PINC_6	=	0x00fe
                           0000FF   892 G$PINC_7$0$0 == 0x00ff
                           0000FF   893 _PINC_7	=	0x00ff
                           000080   894 G$PORTA_0$0$0 == 0x0080
                           000080   895 _PORTA_0	=	0x0080
                           000081   896 G$PORTA_1$0$0 == 0x0081
                           000081   897 _PORTA_1	=	0x0081
                           000082   898 G$PORTA_2$0$0 == 0x0082
                           000082   899 _PORTA_2	=	0x0082
                           000083   900 G$PORTA_3$0$0 == 0x0083
                           000083   901 _PORTA_3	=	0x0083
                           000084   902 G$PORTA_4$0$0 == 0x0084
                           000084   903 _PORTA_4	=	0x0084
                           000085   904 G$PORTA_5$0$0 == 0x0085
                           000085   905 _PORTA_5	=	0x0085
                           000086   906 G$PORTA_6$0$0 == 0x0086
                           000086   907 _PORTA_6	=	0x0086
                           000087   908 G$PORTA_7$0$0 == 0x0087
                           000087   909 _PORTA_7	=	0x0087
                           000088   910 G$PORTB_0$0$0 == 0x0088
                           000088   911 _PORTB_0	=	0x0088
                           000089   912 G$PORTB_1$0$0 == 0x0089
                           000089   913 _PORTB_1	=	0x0089
                           00008A   914 G$PORTB_2$0$0 == 0x008a
                           00008A   915 _PORTB_2	=	0x008a
                           00008B   916 G$PORTB_3$0$0 == 0x008b
                           00008B   917 _PORTB_3	=	0x008b
                           00008C   918 G$PORTB_4$0$0 == 0x008c
                           00008C   919 _PORTB_4	=	0x008c
                           00008D   920 G$PORTB_5$0$0 == 0x008d
                           00008D   921 _PORTB_5	=	0x008d
                           00008E   922 G$PORTB_6$0$0 == 0x008e
                           00008E   923 _PORTB_6	=	0x008e
                           00008F   924 G$PORTB_7$0$0 == 0x008f
                           00008F   925 _PORTB_7	=	0x008f
                           000090   926 G$PORTC_0$0$0 == 0x0090
                           000090   927 _PORTC_0	=	0x0090
                           000091   928 G$PORTC_1$0$0 == 0x0091
                           000091   929 _PORTC_1	=	0x0091
                           000092   930 G$PORTC_2$0$0 == 0x0092
                           000092   931 _PORTC_2	=	0x0092
                           000093   932 G$PORTC_3$0$0 == 0x0093
                           000093   933 _PORTC_3	=	0x0093
                           000094   934 G$PORTC_4$0$0 == 0x0094
                           000094   935 _PORTC_4	=	0x0094
                           000095   936 G$PORTC_5$0$0 == 0x0095
                           000095   937 _PORTC_5	=	0x0095
                           000096   938 G$PORTC_6$0$0 == 0x0096
                           000096   939 _PORTC_6	=	0x0096
                           000097   940 G$PORTC_7$0$0 == 0x0097
                           000097   941 _PORTC_7	=	0x0097
                                    942 ;--------------------------------------------------------
                                    943 ; overlayable register banks
                                    944 ;--------------------------------------------------------
                                    945 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        946 	.ds 8
                                    947 ;--------------------------------------------------------
                                    948 ; internal ram data
                                    949 ;--------------------------------------------------------
                                    950 	.area DSEG    (DATA)
                           000000   951 Lmain.flash_line$lb$1$139==.
      000000                        952 _flash_line_lb_1_139:
      000000                        953 	.ds 2
                           000002   954 Lmain.flash_line$cnt$1$139==.
      000002                        955 _flash_line_cnt_1_139:
      000002                        956 	.ds 1
                                    957 ;--------------------------------------------------------
                                    958 ; overlayable items in internal ram 
                                    959 ;--------------------------------------------------------
                                    960 	.area	OSEG    (OVR,DATA)
                                    961 	.area	OSEG    (OVR,DATA)
                                    962 ;--------------------------------------------------------
                                    963 ; indirectly addressable internal ram data
                                    964 ;--------------------------------------------------------
                                    965 	.area ISEG    (DATA)
                                    966 ;--------------------------------------------------------
                                    967 ; absolute internal ram data
                                    968 ;--------------------------------------------------------
                                    969 	.area IABS    (ABS,DATA)
                                    970 	.area IABS    (ABS,DATA)
                                    971 ;--------------------------------------------------------
                                    972 ; bit data
                                    973 ;--------------------------------------------------------
                                    974 	.area BSEG    (BIT)
                                    975 ;--------------------------------------------------------
                                    976 ; paged external ram data
                                    977 ;--------------------------------------------------------
                                    978 	.area PSEG    (PAG,XDATA)
                                    979 ;--------------------------------------------------------
                                    980 ; external ram data
                                    981 ;--------------------------------------------------------
                                    982 	.area XSEG    (XDATA)
                           007020   983 G$ADCCH0VAL0$0$0 == 0x7020
                           007020   984 _ADCCH0VAL0	=	0x7020
                           007021   985 G$ADCCH0VAL1$0$0 == 0x7021
                           007021   986 _ADCCH0VAL1	=	0x7021
                           007020   987 G$ADCCH0VAL$0$0 == 0x7020
                           007020   988 _ADCCH0VAL	=	0x7020
                           007022   989 G$ADCCH1VAL0$0$0 == 0x7022
                           007022   990 _ADCCH1VAL0	=	0x7022
                           007023   991 G$ADCCH1VAL1$0$0 == 0x7023
                           007023   992 _ADCCH1VAL1	=	0x7023
                           007022   993 G$ADCCH1VAL$0$0 == 0x7022
                           007022   994 _ADCCH1VAL	=	0x7022
                           007024   995 G$ADCCH2VAL0$0$0 == 0x7024
                           007024   996 _ADCCH2VAL0	=	0x7024
                           007025   997 G$ADCCH2VAL1$0$0 == 0x7025
                           007025   998 _ADCCH2VAL1	=	0x7025
                           007024   999 G$ADCCH2VAL$0$0 == 0x7024
                           007024  1000 _ADCCH2VAL	=	0x7024
                           007026  1001 G$ADCCH3VAL0$0$0 == 0x7026
                           007026  1002 _ADCCH3VAL0	=	0x7026
                           007027  1003 G$ADCCH3VAL1$0$0 == 0x7027
                           007027  1004 _ADCCH3VAL1	=	0x7027
                           007026  1005 G$ADCCH3VAL$0$0 == 0x7026
                           007026  1006 _ADCCH3VAL	=	0x7026
                           007028  1007 G$ADCTUNE0$0$0 == 0x7028
                           007028  1008 _ADCTUNE0	=	0x7028
                           007029  1009 G$ADCTUNE1$0$0 == 0x7029
                           007029  1010 _ADCTUNE1	=	0x7029
                           00702A  1011 G$ADCTUNE2$0$0 == 0x702a
                           00702A  1012 _ADCTUNE2	=	0x702a
                           007010  1013 G$DMA0ADDR0$0$0 == 0x7010
                           007010  1014 _DMA0ADDR0	=	0x7010
                           007011  1015 G$DMA0ADDR1$0$0 == 0x7011
                           007011  1016 _DMA0ADDR1	=	0x7011
                           007010  1017 G$DMA0ADDR$0$0 == 0x7010
                           007010  1018 _DMA0ADDR	=	0x7010
                           007014  1019 G$DMA0CONFIG$0$0 == 0x7014
                           007014  1020 _DMA0CONFIG	=	0x7014
                           007012  1021 G$DMA1ADDR0$0$0 == 0x7012
                           007012  1022 _DMA1ADDR0	=	0x7012
                           007013  1023 G$DMA1ADDR1$0$0 == 0x7013
                           007013  1024 _DMA1ADDR1	=	0x7013
                           007012  1025 G$DMA1ADDR$0$0 == 0x7012
                           007012  1026 _DMA1ADDR	=	0x7012
                           007015  1027 G$DMA1CONFIG$0$0 == 0x7015
                           007015  1028 _DMA1CONFIG	=	0x7015
                           007070  1029 G$FRCOSCCONFIG$0$0 == 0x7070
                           007070  1030 _FRCOSCCONFIG	=	0x7070
                           007071  1031 G$FRCOSCCTRL$0$0 == 0x7071
                           007071  1032 _FRCOSCCTRL	=	0x7071
                           007076  1033 G$FRCOSCFREQ0$0$0 == 0x7076
                           007076  1034 _FRCOSCFREQ0	=	0x7076
                           007077  1035 G$FRCOSCFREQ1$0$0 == 0x7077
                           007077  1036 _FRCOSCFREQ1	=	0x7077
                           007076  1037 G$FRCOSCFREQ$0$0 == 0x7076
                           007076  1038 _FRCOSCFREQ	=	0x7076
                           007072  1039 G$FRCOSCKFILT0$0$0 == 0x7072
                           007072  1040 _FRCOSCKFILT0	=	0x7072
                           007073  1041 G$FRCOSCKFILT1$0$0 == 0x7073
                           007073  1042 _FRCOSCKFILT1	=	0x7073
                           007072  1043 G$FRCOSCKFILT$0$0 == 0x7072
                           007072  1044 _FRCOSCKFILT	=	0x7072
                           007078  1045 G$FRCOSCPER0$0$0 == 0x7078
                           007078  1046 _FRCOSCPER0	=	0x7078
                           007079  1047 G$FRCOSCPER1$0$0 == 0x7079
                           007079  1048 _FRCOSCPER1	=	0x7079
                           007078  1049 G$FRCOSCPER$0$0 == 0x7078
                           007078  1050 _FRCOSCPER	=	0x7078
                           007074  1051 G$FRCOSCREF0$0$0 == 0x7074
                           007074  1052 _FRCOSCREF0	=	0x7074
                           007075  1053 G$FRCOSCREF1$0$0 == 0x7075
                           007075  1054 _FRCOSCREF1	=	0x7075
                           007074  1055 G$FRCOSCREF$0$0 == 0x7074
                           007074  1056 _FRCOSCREF	=	0x7074
                           007007  1057 G$ANALOGA$0$0 == 0x7007
                           007007  1058 _ANALOGA	=	0x7007
                           00700C  1059 G$GPIOENABLE$0$0 == 0x700c
                           00700C  1060 _GPIOENABLE	=	0x700c
                           007003  1061 G$EXTIRQ$0$0 == 0x7003
                           007003  1062 _EXTIRQ	=	0x7003
                           007000  1063 G$INTCHGA$0$0 == 0x7000
                           007000  1064 _INTCHGA	=	0x7000
                           007001  1065 G$INTCHGB$0$0 == 0x7001
                           007001  1066 _INTCHGB	=	0x7001
                           007002  1067 G$INTCHGC$0$0 == 0x7002
                           007002  1068 _INTCHGC	=	0x7002
                           007008  1069 G$PALTA$0$0 == 0x7008
                           007008  1070 _PALTA	=	0x7008
                           007009  1071 G$PALTB$0$0 == 0x7009
                           007009  1072 _PALTB	=	0x7009
                           00700A  1073 G$PALTC$0$0 == 0x700a
                           00700A  1074 _PALTC	=	0x700a
                           007046  1075 G$PALTRADIO$0$0 == 0x7046
                           007046  1076 _PALTRADIO	=	0x7046
                           007004  1077 G$PINCHGA$0$0 == 0x7004
                           007004  1078 _PINCHGA	=	0x7004
                           007005  1079 G$PINCHGB$0$0 == 0x7005
                           007005  1080 _PINCHGB	=	0x7005
                           007006  1081 G$PINCHGC$0$0 == 0x7006
                           007006  1082 _PINCHGC	=	0x7006
                           00700B  1083 G$PINSEL$0$0 == 0x700b
                           00700B  1084 _PINSEL	=	0x700b
                           007060  1085 G$LPOSCCONFIG$0$0 == 0x7060
                           007060  1086 _LPOSCCONFIG	=	0x7060
                           007066  1087 G$LPOSCFREQ0$0$0 == 0x7066
                           007066  1088 _LPOSCFREQ0	=	0x7066
                           007067  1089 G$LPOSCFREQ1$0$0 == 0x7067
                           007067  1090 _LPOSCFREQ1	=	0x7067
                           007066  1091 G$LPOSCFREQ$0$0 == 0x7066
                           007066  1092 _LPOSCFREQ	=	0x7066
                           007062  1093 G$LPOSCKFILT0$0$0 == 0x7062
                           007062  1094 _LPOSCKFILT0	=	0x7062
                           007063  1095 G$LPOSCKFILT1$0$0 == 0x7063
                           007063  1096 _LPOSCKFILT1	=	0x7063
                           007062  1097 G$LPOSCKFILT$0$0 == 0x7062
                           007062  1098 _LPOSCKFILT	=	0x7062
                           007068  1099 G$LPOSCPER0$0$0 == 0x7068
                           007068  1100 _LPOSCPER0	=	0x7068
                           007069  1101 G$LPOSCPER1$0$0 == 0x7069
                           007069  1102 _LPOSCPER1	=	0x7069
                           007068  1103 G$LPOSCPER$0$0 == 0x7068
                           007068  1104 _LPOSCPER	=	0x7068
                           007064  1105 G$LPOSCREF0$0$0 == 0x7064
                           007064  1106 _LPOSCREF0	=	0x7064
                           007065  1107 G$LPOSCREF1$0$0 == 0x7065
                           007065  1108 _LPOSCREF1	=	0x7065
                           007064  1109 G$LPOSCREF$0$0 == 0x7064
                           007064  1110 _LPOSCREF	=	0x7064
                           007054  1111 G$LPXOSCGM$0$0 == 0x7054
                           007054  1112 _LPXOSCGM	=	0x7054
                           007F01  1113 G$MISCCTRL$0$0 == 0x7f01
                           007F01  1114 _MISCCTRL	=	0x7f01
                           007053  1115 G$OSCCALIB$0$0 == 0x7053
                           007053  1116 _OSCCALIB	=	0x7053
                           007050  1117 G$OSCFORCERUN$0$0 == 0x7050
                           007050  1118 _OSCFORCERUN	=	0x7050
                           007052  1119 G$OSCREADY$0$0 == 0x7052
                           007052  1120 _OSCREADY	=	0x7052
                           007051  1121 G$OSCRUN$0$0 == 0x7051
                           007051  1122 _OSCRUN	=	0x7051
                           007040  1123 G$RADIOFDATAADDR0$0$0 == 0x7040
                           007040  1124 _RADIOFDATAADDR0	=	0x7040
                           007041  1125 G$RADIOFDATAADDR1$0$0 == 0x7041
                           007041  1126 _RADIOFDATAADDR1	=	0x7041
                           007040  1127 G$RADIOFDATAADDR$0$0 == 0x7040
                           007040  1128 _RADIOFDATAADDR	=	0x7040
                           007042  1129 G$RADIOFSTATADDR0$0$0 == 0x7042
                           007042  1130 _RADIOFSTATADDR0	=	0x7042
                           007043  1131 G$RADIOFSTATADDR1$0$0 == 0x7043
                           007043  1132 _RADIOFSTATADDR1	=	0x7043
                           007042  1133 G$RADIOFSTATADDR$0$0 == 0x7042
                           007042  1134 _RADIOFSTATADDR	=	0x7042
                           007044  1135 G$RADIOMUX$0$0 == 0x7044
                           007044  1136 _RADIOMUX	=	0x7044
                           007084  1137 G$SCRATCH0$0$0 == 0x7084
                           007084  1138 _SCRATCH0	=	0x7084
                           007085  1139 G$SCRATCH1$0$0 == 0x7085
                           007085  1140 _SCRATCH1	=	0x7085
                           007086  1141 G$SCRATCH2$0$0 == 0x7086
                           007086  1142 _SCRATCH2	=	0x7086
                           007087  1143 G$SCRATCH3$0$0 == 0x7087
                           007087  1144 _SCRATCH3	=	0x7087
                           007F00  1145 G$SILICONREV$0$0 == 0x7f00
                           007F00  1146 _SILICONREV	=	0x7f00
                           007F19  1147 G$XTALAMPL$0$0 == 0x7f19
                           007F19  1148 _XTALAMPL	=	0x7f19
                           007F18  1149 G$XTALOSC$0$0 == 0x7f18
                           007F18  1150 _XTALOSC	=	0x7f18
                           007F1A  1151 G$XTALREADY$0$0 == 0x7f1a
                           007F1A  1152 _XTALREADY	=	0x7f1a
                           00FC06  1153 Fmain$flash_deviceid$0$0 == 0xfc06
                           00FC06  1154 _flash_deviceid	=	0xfc06
                           000000  1155 G$orig_jmp_vector$0$0==.
      000000                       1156 _orig_jmp_vector::
      000000                       1157 	.ds 3
                           000003  1158 G$orig_jmp_vector_mask$0$0==.
      000003                       1159 _orig_jmp_vector_mask::
      000003                       1160 	.ds 1
                           000004  1161 G$line_buffer$0$0==.
      000004                       1162 _line_buffer::
      000004                       1163 	.ds 260
                                   1164 ;--------------------------------------------------------
                                   1165 ; absolute external ram data
                                   1166 ;--------------------------------------------------------
                                   1167 	.area XABS    (ABS,XDATA)
                                   1168 ;--------------------------------------------------------
                                   1169 ; external initialized ram data
                                   1170 ;--------------------------------------------------------
                                   1171 	.area XISEG   (XDATA)
                                   1172 	.area HOME    (CODE)
                                   1173 	.area GSINIT0 (CODE)
                                   1174 	.area GSINIT1 (CODE)
                                   1175 	.area GSINIT2 (CODE)
                                   1176 	.area GSINIT3 (CODE)
                                   1177 	.area GSINIT4 (CODE)
                                   1178 	.area GSINIT5 (CODE)
                                   1179 	.area GSINIT  (CODE)
                                   1180 	.area GSFINAL (CODE)
                                   1181 	.area CSEG    (CODE)
                                   1182 ;--------------------------------------------------------
                                   1183 ; global & static initialisations
                                   1184 ;--------------------------------------------------------
                                   1185 	.area HOME    (CODE)
                                   1186 	.area GSINIT  (CODE)
                                   1187 	.area GSFINAL (CODE)
                                   1188 	.area GSINIT  (CODE)
                                   1189 ;--------------------------------------------------------
                                   1190 ; Home
                                   1191 ;--------------------------------------------------------
                                   1192 	.area HOME    (CODE)
                                   1193 	.area HOME    (CODE)
                                   1194 ;--------------------------------------------------------
                                   1195 ; code
                                   1196 ;--------------------------------------------------------
                                   1197 	.area CSEG    (CODE)
                                   1198 ;------------------------------------------------------------
                                   1199 ;Allocation info for local variables in function 'run_application'
                                   1200 ;------------------------------------------------------------
                           000000  1201 	Fmain$run_application$0$0 ==.
                           000000  1202 	C$main.c$39$0$0 ==.
                                   1203 ;	main.c:39: static void run_application(void)
                                   1204 ;	-----------------------------------------
                                   1205 ;	 function run_application
                                   1206 ;	-----------------------------------------
      000000                       1207 _run_application:
                           000007  1208 	ar7 = 0x07
                           000006  1209 	ar6 = 0x06
                           000005  1210 	ar5 = 0x05
                           000004  1211 	ar4 = 0x04
                           000003  1212 	ar3 = 0x03
                           000002  1213 	ar2 = 0x02
                           000001  1214 	ar1 = 0x01
                           000000  1215 	ar0 = 0x00
                           000000  1216 	C$main.c$41$1$118 ==.
                                   1217 ;	main.c:41: OSCFORCERUN = 0x00;
      000000 90 70 50         [24] 1218 	mov	dptr,#_OSCFORCERUN
      000003 E4               [12] 1219 	clr	a
      000004 F0               [24] 1220 	movx	@dptr,a
                           000005  1221 	C$main.c$42$1$118 ==.
                                   1222 ;	main.c:42: FRCOSCCONFIG = 0x01;
      000005 90 70 70         [24] 1223 	mov	dptr,#_FRCOSCCONFIG
      000008 04               [12] 1224 	inc	a
      000009 F0               [24] 1225 	movx	@dptr,a
                           00000A  1226 	C$main.c$43$1$118 ==.
                                   1227 ;	main.c:43: WTCFGB = 0x0F;
      00000A 75 F9 0F         [24] 1228 	mov	_WTCFGB,#0x0f
                           00000D  1229 	C$main.c$44$1$118 ==.
                                   1230 ;	main.c:44: IE = EIE = E2IE = 0;
      00000D 75 A0 00         [24] 1231 	mov	_E2IE,#0x00
      000010 75 98 00         [24] 1232 	mov	_EIE,#0x00
      000013 75 A8 00         [24] 1233 	mov	_IE,#0x00
                           000016  1234 	C$main.c$45$1$118 ==.
                                   1235 ;	main.c:45: CLKCON = 0x08;
      000016 75 C6 08         [24] 1236 	mov	_CLKCON,#0x08
                           000019  1237 	C$main.c$57$1$118 ==.
                                   1238 ;	main.c:57: __endasm;
      000019 90 E3 FE         [24] 1239 	mov	dptr,#_jmp_vector
      00001C E0               [24] 1240 	movx	a,@dptr
      00001D A3               [24] 1241 	inc	dptr
      00001E F8               [12] 1242 	mov	r0,a
      00001F E0               [24] 1243 	movx	a,@dptr
      000020 F5 83            [12] 1244 	mov	dph,a
      000022 88 82            [24] 1245 	mov	dpl,r0
      000024 E4               [12] 1246 	clr	a
      000025 75 81 07         [24] 1247 	mov	_SP,#7
      000028 73               [24] 1248 	jmp	@a+dptr
                           000029  1249 	C$main.c$58$1$118 ==.
                           000029  1250 	XFmain$run_application$0$0 ==.
      000029 22               [24] 1251 	ret
                                   1252 ;------------------------------------------------------------
                                   1253 ;Allocation info for local variables in function 'waitflash'
                                   1254 ;------------------------------------------------------------
                                   1255 ;timeout                   Allocated to registers r6 r7 
                                   1256 ;cnth                      Allocated to registers r5 
                                   1257 ;cntl                      Allocated to registers r6 
                                   1258 ;st                        Allocated to registers r5 
                                   1259 ;------------------------------------------------------------
                           00002A  1260 	Fmain$waitflash$0$0 ==.
                           00002A  1261 	C$main.c$60$1$118 ==.
                                   1262 ;	main.c:60: static int8_t waitflash(uint16_t timeout)
                                   1263 ;	-----------------------------------------
                                   1264 ;	 function waitflash
                                   1265 ;	-----------------------------------------
      00002A                       1266 _waitflash:
      00002A AE 82            [24] 1267 	mov	r6,dpl
      00002C AF 83            [24] 1268 	mov	r7,dph
                           00002E  1269 	C$main.c$62$1$118 ==.
                                   1270 ;	main.c:62: uint8_t cnth = timeout >> 8;
      00002E 8F 05            [24] 1271 	mov	ar5,r7
                           000030  1272 	C$main.c$63$1$118 ==.
                                   1273 ;	main.c:63: uint8_t cntl = timeout;
                           000030  1274 	C$main.c$64$1$120 ==.
                                   1275 ;	main.c:64: ++cnth;
      000030 ED               [12] 1276 	mov	a,r5
      000031 04               [12] 1277 	inc	a
      000032 FF               [12] 1278 	mov	r7,a
                           000033  1279 	C$main.c$65$1$120 ==.
                                   1280 ;	main.c:65: ++cntl;
      000033 0E               [12] 1281 	inc	r6
                           000034  1282 	C$main.c$67$2$121 ==.
                                   1283 ;	main.c:67: do {
      000034                       1284 00105$:
                           000034  1285 	C$main.c$68$3$121 ==.
                                   1286 ;	main.c:68: uint8_t st = NVSTATUS;
                           000034  1287 	C$main.c$69$3$122 ==.
                                   1288 ;	main.c:69: if (!(st & 2))
      000034 E5 91            [12] 1289 	mov	a,_NVSTATUS
      000036 FD               [12] 1290 	mov	r5,a
      000037 20 E1 05         [24] 1291 	jb	acc.1,00102$
                           00003A  1292 	C$main.c$70$3$122 ==.
                                   1293 ;	main.c:70: return -2;
      00003A 75 82 FE         [24] 1294 	mov	dpl,#0xfe
      00003D 80 13            [24] 1295 	sjmp	00111$
      00003F                       1296 00102$:
                           00003F  1297 	C$main.c$71$3$122 ==.
                                   1298 ;	main.c:71: if (!(st & 1))
      00003F ED               [12] 1299 	mov	a,r5
      000040 20 E0 05         [24] 1300 	jb	acc.0,00104$
                           000043  1301 	C$main.c$72$3$122 ==.
                                   1302 ;	main.c:72: return 0;
      000043 75 82 00         [24] 1303 	mov	dpl,#0x00
      000046 80 0A            [24] 1304 	sjmp	00111$
      000048                       1305 00104$:
                           000048  1306 	C$main.c$73$3$122 ==.
                                   1307 ;	main.c:73: uart0_poll();
      000048 12r00r00         [24] 1308 	lcall	_uart0_poll
                           00004B  1309 	C$main.c$74$3$122 ==.
                                   1310 ;	main.c:74: --cntl;
                           00004B  1311 	C$main.c$76$2$121 ==.
                                   1312 ;	main.c:76: while (cntl);
      00004B DE E7            [24] 1313 	djnz	r6,00105$
                           00004D  1314 	C$main.c$77$2$121 ==.
                                   1315 ;	main.c:77: --cnth;
      00004D DF E5            [24] 1316 	djnz	r7,00105$
                           00004F  1317 	C$main.c$79$1$120 ==.
                                   1318 ;	main.c:79: while (cnth);
                           00004F  1319 	C$main.c$80$1$120 ==.
                                   1320 ;	main.c:80: return -1;
      00004F 75 82 FF         [24] 1321 	mov	dpl,#0xff
      000052                       1322 00111$:
                           000052  1323 	C$main.c$81$1$120 ==.
                           000052  1324 	XFmain$waitflash$0$0 ==.
      000052 22               [24] 1325 	ret
                                   1326 ;------------------------------------------------------------
                                   1327 ;Allocation info for local variables in function 'getch'
                                   1328 ;------------------------------------------------------------
                           000053  1329 	Fmain$getch$0$0 ==.
                           000053  1330 	C$main.c$83$1$120 ==.
                                   1331 ;	main.c:83: static char getch(void)
                                   1332 ;	-----------------------------------------
                                   1333 ;	 function getch
                                   1334 ;	-----------------------------------------
      000053                       1335 _getch:
                           000053  1336 	C$main.c$85$1$124 ==.
                                   1337 ;	main.c:85: while (!uart0_rxcount()) {
      000053                       1338 00103$:
      000053 12r00r00         [24] 1339 	lcall	_uart0_rxcount
      000056 E5 82            [12] 1340 	mov	a,dpl
      000058 70 0C            [24] 1341 	jnz	00105$
                           00005A  1342 	C$main.c$86$2$125 ==.
                                   1343 ;	main.c:86: if (uart0_poll())
      00005A 12r00r00         [24] 1344 	lcall	_uart0_poll
      00005D E5 82            [12] 1345 	mov	a,dpl
      00005F 70 F2            [24] 1346 	jnz	00103$
                           000061  1347 	C$main.c$88$2$125 ==.
                                   1348 ;	main.c:88: enter_standby();
      000061 12r00r00         [24] 1349 	lcall	_enter_standby
      000064 80 ED            [24] 1350 	sjmp	00103$
      000066                       1351 00105$:
                           000066  1352 	C$main.c$90$1$124 ==.
                                   1353 ;	main.c:90: return uart0_rx();
      000066 12r00r00         [24] 1354 	lcall	_uart0_rx
                           000069  1355 	C$main.c$91$1$124 ==.
                           000069  1356 	XFmain$getch$0$0 ==.
      000069 22               [24] 1357 	ret
                                   1358 ;------------------------------------------------------------
                                   1359 ;Allocation info for local variables in function 'measurevdd'
                                   1360 ;------------------------------------------------------------
                                   1361 ;vdd                       Allocated to registers r6 r7 
                                   1362 ;------------------------------------------------------------
                           00006A  1363 	Fmain$measurevdd$0$0 ==.
                           00006A  1364 	C$main.c$93$1$124 ==.
                                   1365 ;	main.c:93: static uint16_t measurevdd(void)
                                   1366 ;	-----------------------------------------
                                   1367 ;	 function measurevdd
                                   1368 ;	-----------------------------------------
      00006A                       1369 _measurevdd:
                           00006A  1370 	C$main.c$96$1$127 ==.
                                   1371 ;	main.c:96: ADCCLKSRC = 0x30;
      00006A 75 D1 30         [24] 1372 	mov	_ADCCLKSRC,#0x30
                           00006D  1373 	C$main.c$97$1$127 ==.
                                   1374 ;	main.c:97: ADCCONV = 0x01;
      00006D 75 C9 01         [24] 1375 	mov	_ADCCONV,#0x01
                           000070  1376 	C$main.c$98$1$127 ==.
                                   1377 ;	main.c:98: while (ADCCLKSRC & 0x80) {
      000070                       1378 00101$:
      000070 E5 D1            [12] 1379 	mov	a,_ADCCLKSRC
      000072 30 E7 05         [24] 1380 	jnb	acc.7,00103$
                           000075  1381 	C$main.c$99$2$128 ==.
                                   1382 ;	main.c:99: uart0_poll();
      000075 12r00r00         [24] 1383 	lcall	_uart0_poll
      000078 80 F6            [24] 1384 	sjmp	00101$
      00007A                       1385 00103$:
                           00007A  1386 	C$main.c$101$1$127 ==.
                                   1387 ;	main.c:101: ADCCLKSRC = 0x07;
      00007A 75 D1 07         [24] 1388 	mov	_ADCCLKSRC,#0x07
                           00007D  1389 	C$main.c$102$1$127 ==.
                                   1390 ;	main.c:102: vdd = (ADCCH0VAL >> 2) + (ADCCH1VAL >> 2) + (ADCCH2VAL >> 2) + (ADCCH3VAL >> 2);
      00007D 90 70 20         [24] 1391 	mov	dptr,#_ADCCH0VAL
      000080 E0               [24] 1392 	movx	a,@dptr
      000081 FE               [12] 1393 	mov	r6,a
      000082 A3               [24] 1394 	inc	dptr
      000083 E0               [24] 1395 	movx	a,@dptr
      000084 C3               [12] 1396 	clr	c
      000085 13               [12] 1397 	rrc	a
      000086 CE               [12] 1398 	xch	a,r6
      000087 13               [12] 1399 	rrc	a
      000088 CE               [12] 1400 	xch	a,r6
      000089 C3               [12] 1401 	clr	c
      00008A 13               [12] 1402 	rrc	a
      00008B CE               [12] 1403 	xch	a,r6
      00008C 13               [12] 1404 	rrc	a
      00008D CE               [12] 1405 	xch	a,r6
      00008E FF               [12] 1406 	mov	r7,a
      00008F 90 70 22         [24] 1407 	mov	dptr,#_ADCCH1VAL
      000092 E0               [24] 1408 	movx	a,@dptr
      000093 FC               [12] 1409 	mov	r4,a
      000094 A3               [24] 1410 	inc	dptr
      000095 E0               [24] 1411 	movx	a,@dptr
      000096 C3               [12] 1412 	clr	c
      000097 13               [12] 1413 	rrc	a
      000098 CC               [12] 1414 	xch	a,r4
      000099 13               [12] 1415 	rrc	a
      00009A CC               [12] 1416 	xch	a,r4
      00009B C3               [12] 1417 	clr	c
      00009C 13               [12] 1418 	rrc	a
      00009D CC               [12] 1419 	xch	a,r4
      00009E 13               [12] 1420 	rrc	a
      00009F CC               [12] 1421 	xch	a,r4
      0000A0 FD               [12] 1422 	mov	r5,a
      0000A1 EC               [12] 1423 	mov	a,r4
      0000A2 2E               [12] 1424 	add	a,r6
      0000A3 FE               [12] 1425 	mov	r6,a
      0000A4 ED               [12] 1426 	mov	a,r5
      0000A5 3F               [12] 1427 	addc	a,r7
      0000A6 FF               [12] 1428 	mov	r7,a
      0000A7 90 70 24         [24] 1429 	mov	dptr,#_ADCCH2VAL
      0000AA E0               [24] 1430 	movx	a,@dptr
      0000AB FC               [12] 1431 	mov	r4,a
      0000AC A3               [24] 1432 	inc	dptr
      0000AD E0               [24] 1433 	movx	a,@dptr
      0000AE C3               [12] 1434 	clr	c
      0000AF 13               [12] 1435 	rrc	a
      0000B0 CC               [12] 1436 	xch	a,r4
      0000B1 13               [12] 1437 	rrc	a
      0000B2 CC               [12] 1438 	xch	a,r4
      0000B3 C3               [12] 1439 	clr	c
      0000B4 13               [12] 1440 	rrc	a
      0000B5 CC               [12] 1441 	xch	a,r4
      0000B6 13               [12] 1442 	rrc	a
      0000B7 CC               [12] 1443 	xch	a,r4
      0000B8 FD               [12] 1444 	mov	r5,a
      0000B9 EC               [12] 1445 	mov	a,r4
      0000BA 2E               [12] 1446 	add	a,r6
      0000BB FE               [12] 1447 	mov	r6,a
      0000BC ED               [12] 1448 	mov	a,r5
      0000BD 3F               [12] 1449 	addc	a,r7
      0000BE FF               [12] 1450 	mov	r7,a
      0000BF 90 70 26         [24] 1451 	mov	dptr,#_ADCCH3VAL
      0000C2 E0               [24] 1452 	movx	a,@dptr
      0000C3 FC               [12] 1453 	mov	r4,a
      0000C4 A3               [24] 1454 	inc	dptr
      0000C5 E0               [24] 1455 	movx	a,@dptr
      0000C6 C3               [12] 1456 	clr	c
      0000C7 13               [12] 1457 	rrc	a
      0000C8 CC               [12] 1458 	xch	a,r4
      0000C9 13               [12] 1459 	rrc	a
      0000CA CC               [12] 1460 	xch	a,r4
      0000CB C3               [12] 1461 	clr	c
      0000CC 13               [12] 1462 	rrc	a
      0000CD CC               [12] 1463 	xch	a,r4
      0000CE 13               [12] 1464 	rrc	a
      0000CF CC               [12] 1465 	xch	a,r4
      0000D0 FD               [12] 1466 	mov	r5,a
      0000D1 EC               [12] 1467 	mov	a,r4
      0000D2 2E               [12] 1468 	add	a,r6
      0000D3 FE               [12] 1469 	mov	r6,a
      0000D4 ED               [12] 1470 	mov	a,r5
      0000D5 3F               [12] 1471 	addc	a,r7
                           0000D6  1472 	C$main.c$104$1$127 ==.
                                   1473 ;	main.c:104: vdd >>= 5;
      0000D6 C4               [12] 1474 	swap	a
      0000D7 03               [12] 1475 	rr	a
      0000D8 CE               [12] 1476 	xch	a,r6
      0000D9 C4               [12] 1477 	swap	a
      0000DA 03               [12] 1478 	rr	a
      0000DB 54 07            [12] 1479 	anl	a,#0x07
      0000DD 6E               [12] 1480 	xrl	a,r6
      0000DE CE               [12] 1481 	xch	a,r6
      0000DF 54 07            [12] 1482 	anl	a,#0x07
      0000E1 CE               [12] 1483 	xch	a,r6
      0000E2 6E               [12] 1484 	xrl	a,r6
      0000E3 CE               [12] 1485 	xch	a,r6
                           0000E4  1486 	C$main.c$105$1$127 ==.
                                   1487 ;	main.c:105: vdd += vdd >> 2;
      0000E4 FF               [12] 1488 	mov	r7,a
      0000E5 8E 04            [24] 1489 	mov	ar4,r6
      0000E7 C3               [12] 1490 	clr	c
      0000E8 13               [12] 1491 	rrc	a
      0000E9 CC               [12] 1492 	xch	a,r4
      0000EA 13               [12] 1493 	rrc	a
      0000EB CC               [12] 1494 	xch	a,r4
      0000EC C3               [12] 1495 	clr	c
      0000ED 13               [12] 1496 	rrc	a
      0000EE CC               [12] 1497 	xch	a,r4
      0000EF 13               [12] 1498 	rrc	a
      0000F0 CC               [12] 1499 	xch	a,r4
      0000F1 FD               [12] 1500 	mov	r5,a
      0000F2 EC               [12] 1501 	mov	a,r4
      0000F3 2E               [12] 1502 	add	a,r6
      0000F4 FE               [12] 1503 	mov	r6,a
      0000F5 ED               [12] 1504 	mov	a,r5
      0000F6 3F               [12] 1505 	addc	a,r7
      0000F7 FF               [12] 1506 	mov	r7,a
                           0000F8  1507 	C$main.c$106$1$127 ==.
                                   1508 ;	main.c:106: vdd -= 9 << 7;
      0000F8 EE               [12] 1509 	mov	a,r6
      0000F9 24 80            [12] 1510 	add	a,#0x80
      0000FB FE               [12] 1511 	mov	r6,a
      0000FC EF               [12] 1512 	mov	a,r7
      0000FD 34 FB            [12] 1513 	addc	a,#0xfb
                           0000FF  1514 	C$main.c$107$1$127 ==.
                                   1515 ;	main.c:107: return vdd;
                           0000FF  1516 	C$main.c$108$1$127 ==.
                           0000FF  1517 	XFmain$measurevdd$0$0 ==.
      0000FF 8E 82            [24] 1518 	mov	dpl,r6
      000101 F5 83            [12] 1519 	mov	dph,a
      000103 22               [24] 1520 	ret
                                   1521 ;------------------------------------------------------------
                                   1522 ;Allocation info for local variables in function 'erase_page_write_resetvec'
                                   1523 ;------------------------------------------------------------
                                   1524 ;st                        Allocated to registers r7 
                                   1525 ;pmem                      Allocated to registers r6 r7 
                                   1526 ;------------------------------------------------------------
                           000104  1527 	Fmain$erase_page_write_resetvec$0$0 ==.
                           000104  1528 	C$main.c$110$1$127 ==.
                                   1529 ;	main.c:110: static int8_t erase_page_write_resetvec(void)
                                   1530 ;	-----------------------------------------
                                   1531 ;	 function erase_page_write_resetvec
                                   1532 ;	-----------------------------------------
      000104                       1533 _erase_page_write_resetvec:
                           000104  1534 	C$main.c$114$1$130 ==.
                                   1535 ;	main.c:114: if (measurevdd() < BOOTLDR_MINVDD)
      000104 12r00r6A         [24] 1536 	lcall	_measurevdd
      000107 AE 82            [24] 1537 	mov	r6,dpl
      000109 AF 83            [24] 1538 	mov	r7,dph
      00010B C3               [12] 1539 	clr	c
      00010C EE               [12] 1540 	mov	a,r6
      00010D 94 80            [12] 1541 	subb	a,#0x80
      00010F EF               [12] 1542 	mov	a,r7
      000110 94 02            [12] 1543 	subb	a,#0x02
      000112 50 06            [24] 1544 	jnc	00102$
                           000114  1545 	C$main.c$115$1$130 ==.
                                   1546 ;	main.c:115: return -4;
      000114 75 82 FC         [24] 1547 	mov	dpl,#0xfc
      000117 02r01rC9         [24] 1548 	ljmp	00117$
      00011A                       1549 00102$:
                           00011A  1550 	C$main.c$116$1$130 ==.
                                   1551 ;	main.c:116: NVADDR0 = 0x00;
      00011A 75 92 00         [24] 1552 	mov	_NVADDR0,#0x00
                           00011D  1553 	C$main.c$117$1$130 ==.
                                   1554 ;	main.c:117: NVSTATUS = 0x20;
      00011D 75 91 20         [24] 1555 	mov	_NVSTATUS,#0x20
                           000120  1556 	C$main.c$118$1$130 ==.
                                   1557 ;	main.c:118: st = waitflash(65535);
      000120 90 FF FF         [24] 1558 	mov	dptr,#0xffff
      000123 12r00r2A         [24] 1559 	lcall	_waitflash
                           000126  1560 	C$main.c$119$1$130 ==.
                                   1561 ;	main.c:119: if (st)
      000126 E5 82            [12] 1562 	mov	a,dpl
      000128 FF               [12] 1563 	mov	r7,a
      000129 60 05            [24] 1564 	jz	00104$
                           00012B  1565 	C$main.c$120$1$130 ==.
                                   1566 ;	main.c:120: return st;
      00012B 8F 82            [24] 1567 	mov	dpl,r7
      00012D 02r01rC9         [24] 1568 	ljmp	00117$
      000130                       1569 00104$:
                           000130  1570 	C$main.c$122$1$130 ==.
                                   1571 ;	main.c:122: if (measurevdd() < BOOTLDR_MINVDD)
      000130 12r00r6A         [24] 1572 	lcall	_measurevdd
      000133 AD 82            [24] 1573 	mov	r5,dpl
      000135 AE 83            [24] 1574 	mov	r6,dph
      000137 C3               [12] 1575 	clr	c
      000138 ED               [12] 1576 	mov	a,r5
      000139 94 80            [12] 1577 	subb	a,#0x80
      00013B EE               [12] 1578 	mov	a,r6
      00013C 94 02            [12] 1579 	subb	a,#0x02
      00013E 50 06            [24] 1580 	jnc	00106$
                           000140  1581 	C$main.c$123$1$130 ==.
                                   1582 ;	main.c:123: return -4;
      000140 75 82 FC         [24] 1583 	mov	dpl,#0xfc
      000143 02r01rC9         [24] 1584 	ljmp	00117$
      000146                       1585 00106$:
                           000146  1586 	C$main.c$124$1$130 ==.
                                   1587 ;	main.c:124: NVADDR0 = 0x02;
      000146 75 92 02         [24] 1588 	mov	_NVADDR0,#0x02
                           000149  1589 	C$main.c$125$1$130 ==.
                                   1590 ;	main.c:125: NVDATA0 = bootloader_reset_vector_lo();
      000149 7Dr00            [12] 1591 	mov	r5,#__sdcc_gsinit_startup
      00014B 8D 94            [24] 1592 	mov	_NVDATA0,r5
                           00014D  1593 	C$main.c$126$1$130 ==.
                                   1594 ;	main.c:126: NVDATA1 = 0xff;
      00014D 75 95 FF         [24] 1595 	mov	_NVDATA1,#0xff
                           000150  1596 	C$main.c$127$1$130 ==.
                                   1597 ;	main.c:127: NVSTATUS = 0x30;
      000150 75 91 30         [24] 1598 	mov	_NVSTATUS,#0x30
                           000153  1599 	C$main.c$128$1$130 ==.
                                   1600 ;	main.c:128: st = waitflash(128);
      000153 90 00 80         [24] 1601 	mov	dptr,#0x0080
      000156 12r00r2A         [24] 1602 	lcall	_waitflash
                           000159  1603 	C$main.c$129$1$130 ==.
                                   1604 ;	main.c:129: if (st)
      000159 E5 82            [12] 1605 	mov	a,dpl
      00015B FF               [12] 1606 	mov	r7,a
      00015C 60 04            [24] 1607 	jz	00108$
                           00015E  1608 	C$main.c$130$1$130 ==.
                                   1609 ;	main.c:130: return st;
      00015E 8F 82            [24] 1610 	mov	dpl,r7
      000160 80 67            [24] 1611 	sjmp	00117$
      000162                       1612 00108$:
                           000162  1613 	C$main.c$131$1$130 ==.
                                   1614 ;	main.c:131: NVADDR0 = 0x00;
      000162 75 92 00         [24] 1615 	mov	_NVADDR0,#0x00
                           000165  1616 	C$main.c$132$1$130 ==.
                                   1617 ;	main.c:132: NVDATA0 = 0x02;
      000165 75 94 02         [24] 1618 	mov	_NVDATA0,#0x02
                           000168  1619 	C$main.c$133$1$130 ==.
                                   1620 ;	main.c:133: NVDATA1 = bootloader_reset_vector_hi();
      000168 7Es00            [12] 1621 	mov	r6,#(__sdcc_gsinit_startup >> 8)
      00016A 8E 95            [24] 1622 	mov	_NVDATA1,r6
                           00016C  1623 	C$main.c$134$1$130 ==.
                                   1624 ;	main.c:134: NVSTATUS = 0x30;
      00016C 75 91 30         [24] 1625 	mov	_NVSTATUS,#0x30
                           00016F  1626 	C$main.c$135$1$130 ==.
                                   1627 ;	main.c:135: st = waitflash(128);
      00016F 90 00 80         [24] 1628 	mov	dptr,#0x0080
      000172 12r00r2A         [24] 1629 	lcall	_waitflash
                           000175  1630 	C$main.c$136$1$130 ==.
                                   1631 ;	main.c:136: if (st)
      000175 E5 82            [12] 1632 	mov	a,dpl
      000177 FF               [12] 1633 	mov	r7,a
      000178 60 04            [24] 1634 	jz	00110$
                           00017A  1635 	C$main.c$137$1$130 ==.
                                   1636 ;	main.c:137: return st;
      00017A 8F 82            [24] 1637 	mov	dpl,r7
      00017C 80 4B            [24] 1638 	sjmp	00117$
      00017E                       1639 00110$:
                           00017E  1640 	C$main.c$139$2$131 ==.
                                   1641 ;	main.c:139: const __code uint8_t *pmem = (const __code uint8_t *)(((uint16_t)NVADDR1) << 8);
      00017E AF 93            [24] 1642 	mov	r7,_NVADDR1
      000180 7E 00            [12] 1643 	mov	r6,#0x00
                           000182  1644 	C$main.c$140$2$131 ==.
                                   1645 ;	main.c:140: if (*pmem++ != 0x02)
      000182 8E 82            [24] 1646 	mov	dpl,r6
      000184 8F 83            [24] 1647 	mov	dph,r7
      000186 E4               [12] 1648 	clr	a
      000187 93               [24] 1649 	movc	a,@a+dptr
      000188 FD               [12] 1650 	mov	r5,a
      000189 A3               [24] 1651 	inc	dptr
      00018A AE 82            [24] 1652 	mov	r6,dpl
      00018C AF 83            [24] 1653 	mov	r7,dph
      00018E BD 02 02         [24] 1654 	cjne	r5,#0x02,00148$
      000191 80 05            [24] 1655 	sjmp	00112$
      000193                       1656 00148$:
                           000193  1657 	C$main.c$141$2$131 ==.
                                   1658 ;	main.c:141: return -3;
      000193 75 82 FD         [24] 1659 	mov	dpl,#0xfd
      000196 80 31            [24] 1660 	sjmp	00117$
      000198                       1661 00112$:
                           000198  1662 	C$main.c$142$2$131 ==.
                                   1663 ;	main.c:142: if (*pmem++ != bootloader_reset_vector_hi())
      000198 8E 82            [24] 1664 	mov	dpl,r6
      00019A 8F 83            [24] 1665 	mov	dph,r7
      00019C E4               [12] 1666 	clr	a
      00019D 93               [24] 1667 	movc	a,@a+dptr
      00019E FD               [12] 1668 	mov	r5,a
      00019F A3               [24] 1669 	inc	dptr
      0001A0 AE 82            [24] 1670 	mov	r6,dpl
      0001A2 AF 83            [24] 1671 	mov	r7,dph
      0001A4 7Br00            [12] 1672 	mov	r3,#__sdcc_gsinit_startup
      0001A6 7Cs00            [12] 1673 	mov	r4,#(__sdcc_gsinit_startup >> 8)
      0001A8 8C 02            [24] 1674 	mov	ar2,r4
      0001AA ED               [12] 1675 	mov	a,r5
      0001AB B5 02 02         [24] 1676 	cjne	a,ar2,00149$
      0001AE 80 05            [24] 1677 	sjmp	00114$
      0001B0                       1678 00149$:
                           0001B0  1679 	C$main.c$143$2$131 ==.
                                   1680 ;	main.c:143: return -3;
      0001B0 75 82 FD         [24] 1681 	mov	dpl,#0xfd
      0001B3 80 14            [24] 1682 	sjmp	00117$
      0001B5                       1683 00114$:
                           0001B5  1684 	C$main.c$144$2$131 ==.
                                   1685 ;	main.c:144: if (*pmem++ != bootloader_reset_vector_lo())
      0001B5 8E 82            [24] 1686 	mov	dpl,r6
      0001B7 8F 83            [24] 1687 	mov	dph,r7
      0001B9 E4               [12] 1688 	clr	a
      0001BA 93               [24] 1689 	movc	a,@a+dptr
      0001BB FE               [12] 1690 	mov	r6,a
      0001BC B5 03 02         [24] 1691 	cjne	a,ar3,00150$
      0001BF 80 05            [24] 1692 	sjmp	00116$
      0001C1                       1693 00150$:
                           0001C1  1694 	C$main.c$145$2$131 ==.
                                   1695 ;	main.c:145: return -3;
      0001C1 75 82 FD         [24] 1696 	mov	dpl,#0xfd
      0001C4 80 03            [24] 1697 	sjmp	00117$
      0001C6                       1698 00116$:
                           0001C6  1699 	C$main.c$147$1$130 ==.
                                   1700 ;	main.c:147: return 0;
      0001C6 75 82 00         [24] 1701 	mov	dpl,#0x00
      0001C9                       1702 00117$:
                           0001C9  1703 	C$main.c$148$1$130 ==.
                           0001C9  1704 	XFmain$erase_page_write_resetvec$0$0 ==.
      0001C9 22               [24] 1705 	ret
                                   1706 ;------------------------------------------------------------
                                   1707 ;Allocation info for local variables in function 'erase_app'
                                   1708 ;------------------------------------------------------------
                                   1709 ;st                        Allocated to registers r7 
                                   1710 ;pg                        Allocated to registers r6 
                                   1711 ;------------------------------------------------------------
                           0001CA  1712 	Fmain$erase_app$0$0 ==.
                           0001CA  1713 	C$main.c$150$1$130 ==.
                                   1714 ;	main.c:150: static int8_t erase_app(void)
                                   1715 ;	-----------------------------------------
                                   1716 ;	 function erase_app
                                   1717 ;	-----------------------------------------
      0001CA                       1718 _erase_app:
                           0001CA  1719 	C$main.c$154$1$133 ==.
                                   1720 ;	main.c:154: orig_jmp_vector_mask = 0;
      0001CA 90r00r03         [24] 1721 	mov	dptr,#_orig_jmp_vector_mask
      0001CD E4               [12] 1722 	clr	a
      0001CE F0               [24] 1723 	movx	@dptr,a
                           0001CF  1724 	C$main.c$155$1$133 ==.
                                   1725 ;	main.c:155: flash_unlock();
      0001CF 12r00r00         [24] 1726 	lcall	_flash_unlock
                           0001D2  1727 	C$main.c$156$1$133 ==.
                                   1728 ;	main.c:156: NVADDR1 = 0x04;
      0001D2 75 93 04         [24] 1729 	mov	_NVADDR1,#0x04
                           0001D5  1730 	C$main.c$157$1$133 ==.
                                   1731 ;	main.c:157: st = erase_page_write_resetvec();
      0001D5 12r01r04         [24] 1732 	lcall	_erase_page_write_resetvec
                           0001D8  1733 	C$main.c$158$1$133 ==.
                                   1734 ;	main.c:158: if (st)
      0001D8 E5 82            [12] 1735 	mov	a,dpl
      0001DA FF               [12] 1736 	mov	r7,a
                           0001DB  1737 	C$main.c$160$1$133 ==.
                                   1738 ;	main.c:160: NVADDR1 = 0x00;
      0001DB 70 36            [24] 1739 	jnz	00110$
      0001DD F5 93            [12] 1740 	mov	_NVADDR1,a
                           0001DF  1741 	C$main.c$161$1$133 ==.
                                   1742 ;	main.c:161: st = erase_page_write_resetvec();
      0001DF 12r01r04         [24] 1743 	lcall	_erase_page_write_resetvec
                           0001E2  1744 	C$main.c$162$1$133 ==.
                                   1745 ;	main.c:162: if (st)
      0001E2 E5 82            [12] 1746 	mov	a,dpl
      0001E4 FF               [12] 1747 	mov	r7,a
                           0001E5  1748 	C$main.c$166$1$133 ==.
                                   1749 ;	main.c:166: NVADDR0 = 0x00;
      0001E5 70 2C            [24] 1750 	jnz	00110$
      0001E7 F5 92            [12] 1751 	mov	_NVADDR0,a
                           0001E9  1752 	C$main.c$167$1$133 ==.
                                   1753 ;	main.c:167: do {
      0001E9 7E 04            [12] 1754 	mov	r6,#0x04
      0001EB                       1755 00107$:
                           0001EB  1756 	C$main.c$168$2$134 ==.
                                   1757 ;	main.c:168: NVADDR1 = pg;
      0001EB 8E 93            [24] 1758 	mov	_NVADDR1,r6
                           0001ED  1759 	C$main.c$169$2$134 ==.
                                   1760 ;	main.c:169: NVSTATUS = 0x20;
      0001ED 75 91 20         [24] 1761 	mov	_NVSTATUS,#0x20
                           0001F0  1762 	C$main.c$170$2$134 ==.
                                   1763 ;	main.c:170: st = waitflash(65535);
      0001F0 90 FF FF         [24] 1764 	mov	dptr,#0xffff
      0001F3 C0 06            [24] 1765 	push	ar6
      0001F5 12r00r2A         [24] 1766 	lcall	_waitflash
      0001F8 AF 82            [24] 1767 	mov	r7,dpl
      0001FA D0 06            [24] 1768 	pop	ar6
                           0001FC  1769 	C$main.c$171$2$134 ==.
                                   1770 ;	main.c:171: if (st)
      0001FC EF               [12] 1771 	mov	a,r7
      0001FD 70 14            [24] 1772 	jnz	00110$
                           0001FF  1773 	C$main.c$173$2$134 ==.
                                   1774 ;	main.c:173: pg += 4;
      0001FF EE               [12] 1775 	mov	a,r6
      000200 24 04            [12] 1776 	add	a,#0x04
      000202 FE               [12] 1777 	mov	r6,a
                           000203  1778 	C$main.c$174$1$133 ==.
                                   1779 ;	main.c:174: } while (pg != bootloader_reset_vector_hi());
      000203 7Ds00            [12] 1780 	mov	r5,#(__sdcc_gsinit_startup >> 8)
      000205 8D 04            [24] 1781 	mov	ar4,r5
      000207 EE               [12] 1782 	mov	a,r6
      000208 B5 04 E0         [24] 1783 	cjne	a,ar4,00107$
                           00020B  1784 	C$main.c$175$1$133 ==.
                                   1785 ;	main.c:175: flash_lock();
      00020B 12r00r00         [24] 1786 	lcall	_flash_lock
                           00020E  1787 	C$main.c$176$1$133 ==.
                                   1788 ;	main.c:176: return 0;
      00020E 75 82 00         [24] 1789 	mov	dpl,#0x00
                           000211  1790 	C$main.c$177$1$133 ==.
                                   1791 ;	main.c:177: ferr:
      000211 80 09            [24] 1792 	sjmp	00111$
      000213                       1793 00110$:
                           000213  1794 	C$main.c$178$1$133 ==.
                                   1795 ;	main.c:178: flash_lock();
      000213 C0 07            [24] 1796 	push	ar7
      000215 12r00r00         [24] 1797 	lcall	_flash_lock
      000218 D0 07            [24] 1798 	pop	ar7
                           00021A  1799 	C$main.c$179$1$133 ==.
                                   1800 ;	main.c:179: return st;
      00021A 8F 82            [24] 1801 	mov	dpl,r7
      00021C                       1802 00111$:
                           00021C  1803 	C$main.c$180$1$133 ==.
                           00021C  1804 	XFmain$erase_app$0$0 ==.
      00021C 22               [24] 1805 	ret
                                   1806 ;------------------------------------------------------------
                                   1807 ;Allocation info for local variables in function 'check_app_erased'
                                   1808 ;------------------------------------------------------------
                                   1809 ;pmem                      Allocated to registers r2 r3 
                                   1810 ;------------------------------------------------------------
                           00021D  1811 	Fmain$check_app_erased$0$0 ==.
                           00021D  1812 	C$main.c$182$1$133 ==.
                                   1813 ;	main.c:182: static int8_t check_app_erased(void)
                                   1814 ;	-----------------------------------------
                                   1815 ;	 function check_app_erased
                                   1816 ;	-----------------------------------------
      00021D                       1817 _check_app_erased:
                           00021D  1818 	C$main.c$185$1$136 ==.
                                   1819 ;	main.c:185: if (*pmem++ != 0x02)
      00021D 90 00 00         [24] 1820 	mov	dptr,#0x0000
      000220 E4               [12] 1821 	clr	a
      000221 93               [24] 1822 	movc	a,@a+dptr
      000222 FF               [12] 1823 	mov	r7,a
      000223 BF 02 02         [24] 1824 	cjne	r7,#0x02,00132$
      000226 80 05            [24] 1825 	sjmp	00102$
      000228                       1826 00132$:
                           000228  1827 	C$main.c$186$1$136 ==.
                                   1828 ;	main.c:186: return -3;
      000228 75 82 FD         [24] 1829 	mov	dpl,#0xfd
      00022B 80 53            [24] 1830 	sjmp	00112$
      00022D                       1831 00102$:
                           00022D  1832 	C$main.c$187$1$136 ==.
                                   1833 ;	main.c:187: if (*pmem++ != bootloader_reset_vector_hi())
      00022D 90 00 01         [24] 1834 	mov	dptr,#0x0001
      000230 E4               [12] 1835 	clr	a
      000231 93               [24] 1836 	movc	a,@a+dptr
      000232 FF               [12] 1837 	mov	r7,a
      000233 7Dr00            [12] 1838 	mov	r5,#__sdcc_gsinit_startup
      000235 7Es00            [12] 1839 	mov	r6,#(__sdcc_gsinit_startup >> 8)
      000237 8E 04            [24] 1840 	mov	ar4,r6
      000239 EF               [12] 1841 	mov	a,r7
      00023A B5 04 02         [24] 1842 	cjne	a,ar4,00133$
      00023D 80 05            [24] 1843 	sjmp	00104$
      00023F                       1844 00133$:
                           00023F  1845 	C$main.c$188$1$136 ==.
                                   1846 ;	main.c:188: return -3;
      00023F 75 82 FD         [24] 1847 	mov	dpl,#0xfd
      000242 80 3C            [24] 1848 	sjmp	00112$
      000244                       1849 00104$:
                           000244  1850 	C$main.c$189$1$136 ==.
                                   1851 ;	main.c:189: if (*pmem++ != bootloader_reset_vector_lo())
      000244 90 00 02         [24] 1852 	mov	dptr,#0x0002
      000247 E4               [12] 1853 	clr	a
      000248 93               [24] 1854 	movc	a,@a+dptr
      000249 FF               [12] 1855 	mov	r7,a
      00024A 7A 03            [12] 1856 	mov	r2,#0x03
      00024C 7B 00            [12] 1857 	mov	r3,#0x00
      00024E EF               [12] 1858 	mov	a,r7
      00024F B5 05 02         [24] 1859 	cjne	a,ar5,00134$
      000252 80 05            [24] 1860 	sjmp	00118$
      000254                       1861 00134$:
                           000254  1862 	C$main.c$190$1$136 ==.
                                   1863 ;	main.c:190: return -3;
      000254 75 82 FD         [24] 1864 	mov	dpl,#0xfd
                           000257  1865 	C$main.c$191$1$136 ==.
                                   1866 ;	main.c:191: do {
      000257 80 27            [24] 1867 	sjmp	00112$
      000259                       1868 00118$:
      000259 8A 06            [24] 1869 	mov	ar6,r2
      00025B 8B 07            [24] 1870 	mov	ar7,r3
      00025D                       1871 00109$:
                           00025D  1872 	C$main.c$192$2$137 ==.
                                   1873 ;	main.c:192: if (*pmem++ != 0xFF)
      00025D 8E 82            [24] 1874 	mov	dpl,r6
      00025F 8F 83            [24] 1875 	mov	dph,r7
      000261 E4               [12] 1876 	clr	a
      000262 93               [24] 1877 	movc	a,@a+dptr
      000263 FD               [12] 1878 	mov	r5,a
      000264 A3               [24] 1879 	inc	dptr
      000265 AE 82            [24] 1880 	mov	r6,dpl
      000267 AF 83            [24] 1881 	mov	r7,dph
      000269 BD FF 02         [24] 1882 	cjne	r5,#0xff,00135$
      00026C 80 05            [24] 1883 	sjmp	00110$
      00026E                       1884 00135$:
                           00026E  1885 	C$main.c$193$2$137 ==.
                                   1886 ;	main.c:193: return -1;
      00026E 75 82 FF         [24] 1887 	mov	dpl,#0xff
      000271 80 0D            [24] 1888 	sjmp	00112$
      000273                       1889 00110$:
                           000273  1890 	C$main.c$194$1$136 ==.
                                   1891 ;	main.c:194: } while ((uint8_t)(((uint16_t)pmem) >> 8) != bootloader_reset_vector_hi());
      000273 8E 03            [24] 1892 	mov	ar3,r6
      000275 8F 05            [24] 1893 	mov	ar5,r7
      000277 8D 03            [24] 1894 	mov	ar3,r5
      000279 EB               [12] 1895 	mov	a,r3
      00027A B5 04 E0         [24] 1896 	cjne	a,ar4,00109$
                           00027D  1897 	C$main.c$195$1$136 ==.
                                   1898 ;	main.c:195: return 0;
      00027D 75 82 00         [24] 1899 	mov	dpl,#0x00
      000280                       1900 00112$:
                           000280  1901 	C$main.c$196$1$136 ==.
                           000280  1902 	XFmain$check_app_erased$0$0 ==.
      000280 22               [24] 1903 	ret
                                   1904 ;------------------------------------------------------------
                                   1905 ;Allocation info for local variables in function 'flash_line'
                                   1906 ;------------------------------------------------------------
                                   1907 ;lb                        Allocated with name '_flash_line_lb_1_139'
                                   1908 ;addr                      Allocated to registers r5 r6 
                                   1909 ;cnt                       Allocated with name '_flash_line_cnt_1_139'
                                   1910 ;st                        Allocated to registers r7 
                                   1911 ;ch                        Allocated to registers r6 
                                   1912 ;------------------------------------------------------------
                           000281  1913 	Fmain$flash_line$0$0 ==.
                           000281  1914 	C$main.c$198$1$136 ==.
                                   1915 ;	main.c:198: static int8_t flash_line(void)
                                   1916 ;	-----------------------------------------
                                   1917 ;	 function flash_line
                                   1918 ;	-----------------------------------------
      000281                       1919 _flash_line:
                           000281  1920 	C$main.c$202$1$139 ==.
                                   1921 ;	main.c:202: uint8_t cnt = line_buffer[0];
      000281 90r00r04         [24] 1922 	mov	dptr,#_line_buffer
      000284 E0               [24] 1923 	movx	a,@dptr
                           000285  1924 	C$main.c$204$1$139 ==.
                                   1925 ;	main.c:204: if (!cnt)
      000285 F5*02            [12] 1926 	mov	_flash_line_cnt_1_139,a
                           000287  1927 	C$main.c$205$1$139 ==.
                                   1928 ;	main.c:205: return 0;
      000287 70 05            [24] 1929 	jnz	00102$
      000289 F5 82            [12] 1930 	mov	dpl,a
      00028B 02r04rD0         [24] 1931 	ljmp	00152$
      00028E                       1932 00102$:
                           00028E  1933 	C$main.c$206$1$139 ==.
                                   1934 ;	main.c:206: addr = line_buffer[1];
      00028E 90r00r05         [24] 1935 	mov	dptr,#(_line_buffer + 0x0001)
      000291 E0               [24] 1936 	movx	a,@dptr
                           000292  1937 	C$main.c$207$1$139 ==.
                                   1938 ;	main.c:207: addr <<= 8;
      000292 FE               [12] 1939 	mov	r6,a
      000293 7D 00            [12] 1940 	mov	r5,#0x00
                           000295  1941 	C$main.c$208$1$139 ==.
                                   1942 ;	main.c:208: addr |= line_buffer[2];
      000295 90r00r06         [24] 1943 	mov	dptr,#(_line_buffer + 0x0002)
      000298 E0               [24] 1944 	movx	a,@dptr
      000299 7B 00            [12] 1945 	mov	r3,#0x00
      00029B 42 05            [12] 1946 	orl	ar5,a
      00029D EB               [12] 1947 	mov	a,r3
      00029E 42 06            [12] 1948 	orl	ar6,a
                           0002A0  1949 	C$main.c$209$1$139 ==.
                                   1950 ;	main.c:209: lb = &line_buffer[4];
      0002A0 74 04            [12] 1951 	mov	a,#0x04
      0002A2 24r04            [12] 1952 	add	a,#_line_buffer
      0002A4 F5*00            [12] 1953 	mov	_flash_line_lb_1_139,a
      0002A6 E4               [12] 1954 	clr	a
      0002A7 34s00            [12] 1955 	addc	a,#(_line_buffer >> 8)
      0002A9 F5*01            [12] 1956 	mov	(_flash_line_lb_1_139 + 1),a
                           0002AB  1957 	C$main.c$210$1$139 ==.
                                   1958 ;	main.c:210: flash_unlock();
      0002AB C0 06            [24] 1959 	push	ar6
      0002AD C0 05            [24] 1960 	push	ar5
      0002AF 12r00r00         [24] 1961 	lcall	_flash_unlock
      0002B2 D0 05            [24] 1962 	pop	ar5
      0002B4 D0 06            [24] 1963 	pop	ar6
                           0002B6  1964 	C$main.c$211$3$141 ==.
                                   1965 ;	main.c:211: do {
      0002B6                       1966 00138$:
                           0002B6  1967 	C$main.c$212$2$140 ==.
                                   1968 ;	main.c:212: if (addr < 3) {
      0002B6 C3               [12] 1969 	clr	c
      0002B7 ED               [12] 1970 	mov	a,r5
      0002B8 94 03            [12] 1971 	subb	a,#0x03
      0002BA EE               [12] 1972 	mov	a,r6
      0002BB 94 00            [12] 1973 	subb	a,#0x00
      0002BD 40 03            [24] 1974 	jc	00230$
      0002BF 02r03r97         [24] 1975 	ljmp	00117$
      0002C2                       1976 00230$:
                           0002C2  1977 	C$main.c$213$3$141 ==.
                                   1978 ;	main.c:213: orig_jmp_vector[(uint8_t)addr] = *lb++;
      0002C2 8D 02            [24] 1979 	mov	ar2,r5
      0002C4 EA               [12] 1980 	mov	a,r2
      0002C5 24r00            [12] 1981 	add	a,#_orig_jmp_vector
      0002C7 F8               [12] 1982 	mov	r0,a
      0002C8 E4               [12] 1983 	clr	a
      0002C9 34s00            [12] 1984 	addc	a,#(_orig_jmp_vector >> 8)
      0002CB F9               [12] 1985 	mov	r1,a
      0002CC 85*00 82         [24] 1986 	mov	dpl,_flash_line_lb_1_139
      0002CF 85*01 83         [24] 1987 	mov	dph,(_flash_line_lb_1_139 + 1)
      0002D2 E0               [24] 1988 	movx	a,@dptr
      0002D3 FF               [12] 1989 	mov	r7,a
      0002D4 A3               [24] 1990 	inc	dptr
      0002D5 85 82*00         [24] 1991 	mov	_flash_line_lb_1_139,dpl
      0002D8 85 83*01         [24] 1992 	mov	(_flash_line_lb_1_139 + 1),dph
      0002DB 88 82            [24] 1993 	mov	dpl,r0
      0002DD 89 83            [24] 1994 	mov	dph,r1
      0002DF EF               [12] 1995 	mov	a,r7
      0002E0 F0               [24] 1996 	movx	@dptr,a
                           0002E1  1997 	C$main.c$214$3$141 ==.
                                   1998 ;	main.c:214: orig_jmp_vector_mask |= 1 << (uint8_t)addr;
      0002E1 8A F0            [24] 1999 	mov	b,r2
      0002E3 05 F0            [12] 2000 	inc	b
      0002E5 74 01            [12] 2001 	mov	a,#0x01
      0002E7 80 02            [24] 2002 	sjmp	00233$
      0002E9                       2003 00231$:
      0002E9 25 E0            [12] 2004 	add	a,acc
      0002EB                       2005 00233$:
      0002EB D5 F0 FB         [24] 2006 	djnz	b,00231$
      0002EE FA               [12] 2007 	mov	r2,a
      0002EF 90r00r03         [24] 2008 	mov	dptr,#_orig_jmp_vector_mask
      0002F2 E0               [24] 2009 	movx	a,@dptr
      0002F3 FF               [12] 2010 	mov	r7,a
      0002F4 4A               [12] 2011 	orl	a,r2
      0002F5 F0               [24] 2012 	movx	@dptr,a
                           0002F6  2013 	C$main.c$215$3$141 ==.
                                   2014 ;	main.c:215: ++addr;
      0002F6 0D               [12] 2015 	inc	r5
      0002F7 BD 00 01         [24] 2016 	cjne	r5,#0x00,00234$
      0002FA 0E               [12] 2017 	inc	r6
      0002FB                       2018 00234$:
                           0002FB  2019 	C$main.c$216$3$141 ==.
                                   2020 ;	main.c:216: if (3 & (uint8_t)~orig_jmp_vector_mask)
      0002FB 90r00r03         [24] 2021 	mov	dptr,#_orig_jmp_vector_mask
      0002FE E0               [24] 2022 	movx	a,@dptr
      0002FF F4               [12] 2023 	cpl	a
      000300 FF               [12] 2024 	mov	r7,a
      000301 54 03            [12] 2025 	anl	a,#0x03
      000303 60 03            [24] 2026 	jz	00236$
      000305 02r04r8D         [24] 2027 	ljmp	00139$
      000308                       2028 00236$:
                           000308  2029 	C$main.c$218$3$141 ==.
                                   2030 ;	main.c:218: if (!((orig_jmp_vector[0] ^ 0x01) & 0x0F)) {
      000308 90r00r00         [24] 2031 	mov	dptr,#_orig_jmp_vector
      00030B E0               [24] 2032 	movx	a,@dptr
      00030C FA               [12] 2033 	mov	r2,a
      00030D 74 01            [12] 2034 	mov	a,#0x01
      00030F 6A               [12] 2035 	xrl	a,r2
      000310 54 0F            [12] 2036 	anl	a,#0x0f
      000312 70 0F            [24] 2037 	jnz	00110$
                           000314  2038 	C$main.c$219$4$142 ==.
                                   2039 ;	main.c:219: NVDATA0 = orig_jmp_vector[1];
      000314 90r00r01         [24] 2040 	mov	dptr,#(_orig_jmp_vector + 0x0001)
      000317 E0               [24] 2041 	movx	a,@dptr
      000318 F5 94            [12] 2042 	mov	_NVDATA0,a
                           00031A  2043 	C$main.c$220$4$142 ==.
                                   2044 ;	main.c:220: NVDATA1 = orig_jmp_vector[0] >> 5;
      00031A EA               [12] 2045 	mov	a,r2
      00031B C4               [12] 2046 	swap	a
      00031C 03               [12] 2047 	rr	a
      00031D 54 07            [12] 2048 	anl	a,#0x07
      00031F F5 95            [12] 2049 	mov	_NVDATA1,a
      000321 80 1E            [24] 2050 	sjmp	00111$
      000323                       2051 00110$:
                           000323  2052 	C$main.c$221$3$141 ==.
                                   2053 ;	main.c:221: } else if (!(7 & (uint8_t)~orig_jmp_vector_mask) && !(0xEF & (0x02 ^ orig_jmp_vector[0]))) {
      000323 EF               [12] 2054 	mov	a,r7
      000324 54 07            [12] 2055 	anl	a,#0x07
      000326 60 03            [24] 2056 	jz	00240$
      000328 02r04r8D         [24] 2057 	ljmp	00139$
      00032B                       2058 00240$:
      00032B 74 02            [12] 2059 	mov	a,#0x02
      00032D 6A               [12] 2060 	xrl	a,r2
      00032E 54 EF            [12] 2061 	anl	a,#0xef
      000330 60 03            [24] 2062 	jz	00242$
      000332 02r04r8D         [24] 2063 	ljmp	00139$
      000335                       2064 00242$:
                           000335  2065 	C$main.c$222$4$143 ==.
                                   2066 ;	main.c:222: NVDATA0 = orig_jmp_vector[2];
      000335 90r00r02         [24] 2067 	mov	dptr,#(_orig_jmp_vector + 0x0002)
      000338 E0               [24] 2068 	movx	a,@dptr
      000339 F5 94            [12] 2069 	mov	_NVDATA0,a
                           00033B  2070 	C$main.c$223$4$143 ==.
                                   2071 ;	main.c:223: NVDATA1 = orig_jmp_vector[1];
      00033B 90r00r01         [24] 2072 	mov	dptr,#(_orig_jmp_vector + 0x0001)
      00033E E0               [24] 2073 	movx	a,@dptr
      00033F F5 95            [12] 2074 	mov	_NVDATA1,a
                           000341  2075 	C$main.c$225$3$141 ==.
                                   2076 ;	main.c:225: continue;
      000341                       2077 00111$:
                           000341  2078 	C$main.c$227$3$141 ==.
                                   2079 ;	main.c:227: NVADDR0 = (uint16_t)&jmp_vector;
      000341 7A FE            [12] 2080 	mov	r2,#_jmp_vector
      000343 7F E3            [12] 2081 	mov	r7,#(_jmp_vector >> 8)
      000345 8A 92            [24] 2082 	mov	_NVADDR0,r2
                           000347  2083 	C$main.c$228$3$141 ==.
                                   2084 ;	main.c:228: NVADDR1 = ((uint16_t)&jmp_vector) >> 8;
      000347 7A FE            [12] 2085 	mov	r2,#_jmp_vector
      000349 7F E3            [12] 2086 	mov	r7,#(_jmp_vector >> 8)
      00034B 8F 93            [24] 2087 	mov	_NVADDR1,r7
                           00034D  2088 	C$main.c$229$3$141 ==.
                                   2089 ;	main.c:229: NVSTATUS = 0x30;
      00034D 75 91 30         [24] 2090 	mov	_NVSTATUS,#0x30
                           000350  2091 	C$main.c$230$3$141 ==.
                                   2092 ;	main.c:230: st = waitflash(128);
      000350 90 00 80         [24] 2093 	mov	dptr,#0x0080
      000353 C0 06            [24] 2094 	push	ar6
      000355 C0 05            [24] 2095 	push	ar5
      000357 12r00r2A         [24] 2096 	lcall	_waitflash
      00035A AF 82            [24] 2097 	mov	r7,dpl
      00035C D0 05            [24] 2098 	pop	ar5
      00035E D0 06            [24] 2099 	pop	ar6
                           000360  2100 	C$main.c$231$3$141 ==.
                                   2101 ;	main.c:231: if (st) {
      000360 EF               [12] 2102 	mov	a,r7
      000361 60 0C            [24] 2103 	jz	00113$
                           000363  2104 	C$main.c$232$4$145 ==.
                                   2105 ;	main.c:232: flash_lock();
      000363 C0 07            [24] 2106 	push	ar7
      000365 12r00r00         [24] 2107 	lcall	_flash_lock
      000368 D0 07            [24] 2108 	pop	ar7
                           00036A  2109 	C$main.c$233$4$145 ==.
                                   2110 ;	main.c:233: return st;
      00036A 8F 82            [24] 2111 	mov	dpl,r7
      00036C 02r04rD0         [24] 2112 	ljmp	00152$
      00036F                       2113 00113$:
                           00036F  2114 	C$main.c$235$3$141 ==.
                                   2115 ;	main.c:235: if (((uint16_t)NVDATA1) ^ NVDATA0 ^ jmp_vector)
      00036F A9 95            [24] 2116 	mov	r1,_NVDATA1
      000371 7A 00            [12] 2117 	mov	r2,#0x00
      000373 A8 94            [24] 2118 	mov	r0,_NVDATA0
      000375 7C 00            [12] 2119 	mov	r4,#0x00
      000377 E8               [12] 2120 	mov	a,r0
      000378 62 01            [12] 2121 	xrl	ar1,a
      00037A EC               [12] 2122 	mov	a,r4
      00037B 62 02            [12] 2123 	xrl	ar2,a
      00037D 90 E3 FE         [24] 2124 	mov	dptr,#_jmp_vector
      000380 E4               [12] 2125 	clr	a
      000381 93               [24] 2126 	movc	a,@a+dptr
      000382 FB               [12] 2127 	mov	r3,a
      000383 74 01            [12] 2128 	mov	a,#0x01
      000385 93               [24] 2129 	movc	a,@a+dptr
      000386 FC               [12] 2130 	mov	r4,a
      000387 EB               [12] 2131 	mov	a,r3
      000388 62 01            [12] 2132 	xrl	ar1,a
      00038A EC               [12] 2133 	mov	a,r4
      00038B 62 02            [12] 2134 	xrl	ar2,a
      00038D E9               [12] 2135 	mov	a,r1
      00038E 4A               [12] 2136 	orl	a,r2
      00038F 70 03            [24] 2137 	jnz	00244$
      000391 02r04r8D         [24] 2138 	ljmp	00139$
      000394                       2139 00244$:
                           000394  2140 	C$main.c$236$3$141 ==.
                                   2141 ;	main.c:236: goto cmperr;
      000394 02r04rBF         [24] 2142 	ljmp	00148$
                           000397  2143 	C$main.c$237$2$140 ==.
                                   2144 ;	main.c:237: continue;
      000397                       2145 00117$:
                           000397  2146 	C$main.c$239$2$140 ==.
                                   2147 ;	main.c:239: NVADDR0 = (uint8_t)addr & (uint8_t)~1;
      000397 8D 04            [24] 2148 	mov	ar4,r5
      000399 74 FE            [12] 2149 	mov	a,#0xfe
      00039B 5C               [12] 2150 	anl	a,r4
      00039C F5 92            [12] 2151 	mov	_NVADDR0,a
                           00039E  2152 	C$main.c$240$2$140 ==.
                                   2153 ;	main.c:240: NVADDR1 = addr >> 8;
      00039E 8E 04            [24] 2154 	mov	ar4,r6
      0003A0 8C 93            [24] 2155 	mov	_NVADDR1,r4
                           0003A2  2156 	C$main.c$241$2$140 ==.
                                   2157 ;	main.c:241: if ((uint8_t)(addr >> 8) >= bootloader_reset_vector_hi())
      0003A2 7Bs00            [12] 2158 	mov	r3,#(__sdcc_gsinit_startup >> 8)
      0003A4 8B 02            [24] 2159 	mov	ar2,r3
      0003A6 C3               [12] 2160 	clr	c
      0003A7 EC               [12] 2161 	mov	a,r4
      0003A8 9A               [12] 2162 	subb	a,r2
      0003A9 40 03            [24] 2163 	jc	00245$
      0003AB 02r04rBF         [24] 2164 	ljmp	00148$
      0003AE                       2165 00245$:
                           0003AE  2166 	C$main.c$243$2$140 ==.
                                   2167 ;	main.c:243: if (addr & 1) {
      0003AE ED               [12] 2168 	mov	a,r5
      0003AF 30 E0 43         [24] 2169 	jnb	acc.0,00125$
                           0003B2  2170 	C$main.c$244$3$146 ==.
                                   2171 ;	main.c:244: NVDATA0 = 0xff;
      0003B2 75 94 FF         [24] 2172 	mov	_NVDATA0,#0xff
                           0003B5  2173 	C$main.c$245$3$146 ==.
                                   2174 ;	main.c:245: NVDATA1 = *lb++;
      0003B5 85*00 82         [24] 2175 	mov	dpl,_flash_line_lb_1_139
      0003B8 85*01 83         [24] 2176 	mov	dph,(_flash_line_lb_1_139 + 1)
      0003BB E0               [24] 2177 	movx	a,@dptr
      0003BC F5 95            [12] 2178 	mov	_NVDATA1,a
      0003BE A3               [24] 2179 	inc	dptr
      0003BF 85 82*00         [24] 2180 	mov	_flash_line_lb_1_139,dpl
      0003C2 85 83*01         [24] 2181 	mov	(_flash_line_lb_1_139 + 1),dph
                           0003C5  2182 	C$main.c$246$3$146 ==.
                                   2183 ;	main.c:246: NVSTATUS = 0x30;
      0003C5 75 91 30         [24] 2184 	mov	_NVSTATUS,#0x30
                           0003C8  2185 	C$main.c$247$3$146 ==.
                                   2186 ;	main.c:247: st = waitflash(128);
      0003C8 90 00 80         [24] 2187 	mov	dptr,#0x0080
      0003CB C0 06            [24] 2188 	push	ar6
      0003CD C0 05            [24] 2189 	push	ar5
      0003CF 12r00r2A         [24] 2190 	lcall	_waitflash
      0003D2 AF 82            [24] 2191 	mov	r7,dpl
      0003D4 D0 05            [24] 2192 	pop	ar5
      0003D6 D0 06            [24] 2193 	pop	ar6
                           0003D8  2194 	C$main.c$248$3$146 ==.
                                   2195 ;	main.c:248: if (st)
      0003D8 EF               [12] 2196 	mov	a,r7
      0003D9 60 03            [24] 2197 	jz	00247$
      0003DB 02r04rC7         [24] 2198 	ljmp	00149$
      0003DE                       2199 00247$:
                           0003DE  2200 	C$main.c$250$3$146 ==.
                                   2201 ;	main.c:250: if (NVDATA1 != *(const __code uint8_t *)addr)
      0003DE 8D 82            [24] 2202 	mov	dpl,r5
      0003E0 8E 83            [24] 2203 	mov	dph,r6
      0003E2 E4               [12] 2204 	clr	a
      0003E3 93               [24] 2205 	movc	a,@a+dptr
      0003E4 FC               [12] 2206 	mov	r4,a
      0003E5 B5 95 02         [24] 2207 	cjne	a,_NVDATA1,00248$
      0003E8 80 03            [24] 2208 	sjmp	00249$
      0003EA                       2209 00248$:
      0003EA 02r04rBF         [24] 2210 	ljmp	00148$
      0003ED                       2211 00249$:
                           0003ED  2212 	C$main.c$252$3$146 ==.
                                   2213 ;	main.c:252: ++addr;
      0003ED 0D               [12] 2214 	inc	r5
      0003EE BD 00 01         [24] 2215 	cjne	r5,#0x00,00250$
      0003F1 0E               [12] 2216 	inc	r6
      0003F2                       2217 00250$:
                           0003F2  2218 	C$main.c$253$3$146 ==.
                                   2219 ;	main.c:253: continue;
      0003F2 02r04r8D         [24] 2220 	ljmp	00139$
      0003F5                       2221 00125$:
                           0003F5  2222 	C$main.c$255$2$140 ==.
                                   2223 ;	main.c:255: if (!(cnt & (uint8_t)~1)) {
      0003F5 E5*02            [12] 2224 	mov	a,_flash_line_cnt_1_139
      0003F7 54 FE            [12] 2225 	anl	a,#0xfe
      0003F9 70 42            [24] 2226 	jnz	00131$
                           0003FB  2227 	C$main.c$256$3$147 ==.
                                   2228 ;	main.c:256: NVDATA0 = *lb++;
      0003FB 85*00 82         [24] 2229 	mov	dpl,_flash_line_lb_1_139
      0003FE 85*01 83         [24] 2230 	mov	dph,(_flash_line_lb_1_139 + 1)
      000401 E0               [24] 2231 	movx	a,@dptr
      000402 F5 94            [12] 2232 	mov	_NVDATA0,a
      000404 A3               [24] 2233 	inc	dptr
      000405 85 82*00         [24] 2234 	mov	_flash_line_lb_1_139,dpl
      000408 85 83*01         [24] 2235 	mov	(_flash_line_lb_1_139 + 1),dph
                           00040B  2236 	C$main.c$257$3$147 ==.
                                   2237 ;	main.c:257: NVDATA1 = 0xff;
      00040B 75 95 FF         [24] 2238 	mov	_NVDATA1,#0xff
                           00040E  2239 	C$main.c$258$3$147 ==.
                                   2240 ;	main.c:258: NVSTATUS = 0x30;
      00040E 75 91 30         [24] 2241 	mov	_NVSTATUS,#0x30
                           000411  2242 	C$main.c$259$3$147 ==.
                                   2243 ;	main.c:259: st = waitflash(128);
      000411 90 00 80         [24] 2244 	mov	dptr,#0x0080
      000414 C0 06            [24] 2245 	push	ar6
      000416 C0 05            [24] 2246 	push	ar5
      000418 12r00r2A         [24] 2247 	lcall	_waitflash
      00041B AF 82            [24] 2248 	mov	r7,dpl
      00041D D0 05            [24] 2249 	pop	ar5
      00041F D0 06            [24] 2250 	pop	ar6
                           000421  2251 	C$main.c$260$3$147 ==.
                                   2252 ;	main.c:260: if (st)
      000421 EF               [12] 2253 	mov	a,r7
      000422 60 03            [24] 2254 	jz	00253$
      000424 02r04rC7         [24] 2255 	ljmp	00149$
      000427                       2256 00253$:
                           000427  2257 	C$main.c$262$3$147 ==.
                                   2258 ;	main.c:262: if (NVDATA0 != *(const __code uint8_t *)addr)
      000427 8D 82            [24] 2259 	mov	dpl,r5
      000429 8E 83            [24] 2260 	mov	dph,r6
      00042B E4               [12] 2261 	clr	a
      00042C 93               [24] 2262 	movc	a,@a+dptr
      00042D FC               [12] 2263 	mov	r4,a
      00042E B5 94 02         [24] 2264 	cjne	a,_NVDATA0,00254$
      000431 80 03            [24] 2265 	sjmp	00255$
      000433                       2266 00254$:
      000433 02r04rBF         [24] 2267 	ljmp	00148$
      000436                       2268 00255$:
                           000436  2269 	C$main.c$264$3$147 ==.
                                   2270 ;	main.c:264: ++addr;
      000436 0D               [12] 2271 	inc	r5
                           000437  2272 	C$main.c$265$3$147 ==.
                                   2273 ;	main.c:265: continue;
      000437 BD 00 53         [24] 2274 	cjne	r5,#0x00,00139$
      00043A 0E               [12] 2275 	inc	r6
      00043B 80 50            [24] 2276 	sjmp	00139$
      00043D                       2277 00131$:
                           00043D  2278 	C$main.c$267$2$140 ==.
                                   2279 ;	main.c:267: NVDATA0 = *lb++;
      00043D 85*00 82         [24] 2280 	mov	dpl,_flash_line_lb_1_139
      000440 85*01 83         [24] 2281 	mov	dph,(_flash_line_lb_1_139 + 1)
      000443 E0               [24] 2282 	movx	a,@dptr
      000444 F5 94            [12] 2283 	mov	_NVDATA0,a
      000446 A3               [24] 2284 	inc	dptr
                           000447  2285 	C$main.c$268$2$140 ==.
                                   2286 ;	main.c:268: NVDATA1 = *lb++;
      000447 85 82*00         [24] 2287 	mov	_flash_line_lb_1_139,dpl
      00044A 85 83*01         [24] 2288 	mov  (_flash_line_lb_1_139 + 1),dph
      00044D E0               [24] 2289 	movx	a,@dptr
      00044E F5 95            [12] 2290 	mov	_NVDATA1,a
      000450 A3               [24] 2291 	inc	dptr
      000451 85 82*00         [24] 2292 	mov	_flash_line_lb_1_139,dpl
      000454 85 83*01         [24] 2293 	mov	(_flash_line_lb_1_139 + 1),dph
                           000457  2294 	C$main.c$269$2$140 ==.
                                   2295 ;	main.c:269: NVSTATUS = 0x30;
      000457 75 91 30         [24] 2296 	mov	_NVSTATUS,#0x30
                           00045A  2297 	C$main.c$270$2$140 ==.
                                   2298 ;	main.c:270: st = waitflash(128);
      00045A 90 00 80         [24] 2299 	mov	dptr,#0x0080
      00045D C0 06            [24] 2300 	push	ar6
      00045F C0 05            [24] 2301 	push	ar5
      000461 12r00r2A         [24] 2302 	lcall	_waitflash
      000464 AF 82            [24] 2303 	mov	r7,dpl
      000466 D0 05            [24] 2304 	pop	ar5
      000468 D0 06            [24] 2305 	pop	ar6
                           00046A  2306 	C$main.c$271$2$140 ==.
                                   2307 ;	main.c:271: if (st)
      00046A EF               [12] 2308 	mov	a,r7
      00046B 70 5A            [24] 2309 	jnz	00149$
                           00046D  2310 	C$main.c$273$2$140 ==.
                                   2311 ;	main.c:273: if (NVDATA0 != *(const __code uint8_t *)addr)
      00046D 8D 82            [24] 2312 	mov	dpl,r5
      00046F 8E 83            [24] 2313 	mov	dph,r6
      000471 E4               [12] 2314 	clr	a
      000472 93               [24] 2315 	movc	a,@a+dptr
      000473 FC               [12] 2316 	mov	r4,a
      000474 B5 94 48         [24] 2317 	cjne	a,_NVDATA0,00148$
                           000477  2318 	C$main.c$275$2$140 ==.
                                   2319 ;	main.c:275: ++addr;
      000477 0D               [12] 2320 	inc	r5
      000478 BD 00 01         [24] 2321 	cjne	r5,#0x00,00260$
      00047B 0E               [12] 2322 	inc	r6
      00047C                       2323 00260$:
                           00047C  2324 	C$main.c$276$2$140 ==.
                                   2325 ;	main.c:276: if (NVDATA1 != *(const __code uint8_t *)addr)
      00047C 8D 82            [24] 2326 	mov	dpl,r5
      00047E 8E 83            [24] 2327 	mov	dph,r6
      000480 E4               [12] 2328 	clr	a
      000481 93               [24] 2329 	movc	a,@a+dptr
      000482 FC               [12] 2330 	mov	r4,a
      000483 B5 95 39         [24] 2331 	cjne	a,_NVDATA1,00148$
                           000486  2332 	C$main.c$278$2$140 ==.
                                   2333 ;	main.c:278: ++addr;
      000486 0D               [12] 2334 	inc	r5
      000487 BD 00 01         [24] 2335 	cjne	r5,#0x00,00263$
      00048A 0E               [12] 2336 	inc	r6
      00048B                       2337 00263$:
                           00048B  2338 	C$main.c$279$2$140 ==.
                                   2339 ;	main.c:279: --cnt;
      00048B 15*02            [12] 2340 	dec	_flash_line_cnt_1_139
      00048D                       2341 00139$:
                           00048D  2342 	C$main.c$280$1$139 ==.
                                   2343 ;	main.c:280: } while (--cnt);
      00048D D5*02 02         [24] 2344 	djnz	_flash_line_cnt_1_139,00264$
      000490 80 03            [24] 2345 	sjmp	00265$
      000492                       2346 00264$:
      000492 02r02rB6         [24] 2347 	ljmp	00138$
      000495                       2348 00265$:
                           000495  2349 	C$main.c$281$1$139 ==.
                                   2350 ;	main.c:281: flash_lock();
      000495 12r00r00         [24] 2351 	lcall	_flash_lock
                           000498  2352 	C$main.c$282$1$139 ==.
                                   2353 ;	main.c:282: st = 0;
      000498 7F 00            [12] 2354 	mov	r7,#0x00
      00049A                       2355 00150$:
                           00049A  2356 	C$main.c$284$2$148 ==.
                                   2357 ;	main.c:284: char ch = getch();
      00049A C0 07            [24] 2358 	push	ar7
      00049C 12r00r53         [24] 2359 	lcall	_getch
      00049F AE 82            [24] 2360 	mov	r6,dpl
      0004A1 D0 07            [24] 2361 	pop	ar7
                           0004A3  2362 	C$main.c$285$2$148 ==.
                                   2363 ;	main.c:285: switch (ch) {
      0004A3 BE 09 02         [24] 2364 	cjne	r6,#0x09,00266$
      0004A6 80 F2            [24] 2365 	sjmp	00150$
      0004A8                       2366 00266$:
      0004A8 BE 0A 02         [24] 2367 	cjne	r6,#0x0a,00267$
      0004AB 80 0A            [24] 2368 	sjmp	00142$
      0004AD                       2369 00267$:
      0004AD BE 0D 02         [24] 2370 	cjne	r6,#0x0d,00268$
      0004B0 80 05            [24] 2371 	sjmp	00142$
      0004B2                       2372 00268$:
                           0004B2  2373 	C$main.c$287$3$149 ==.
                                   2374 ;	main.c:287: case '\r':
      0004B2 BE 20 06         [24] 2375 	cjne	r6,#0x20,00145$
      0004B5 80 E3            [24] 2376 	sjmp	00150$
      0004B7                       2377 00142$:
                           0004B7  2378 	C$main.c$288$3$149 ==.
                                   2379 ;	main.c:288: return st;
      0004B7 8F 82            [24] 2380 	mov	dpl,r7
                           0004B9  2381 	C$main.c$294$3$149 ==.
                                   2382 ;	main.c:294: default:
      0004B9 80 15            [24] 2383 	sjmp	00152$
      0004BB                       2384 00145$:
                           0004BB  2385 	C$main.c$295$3$149 ==.
                                   2386 ;	main.c:295: st = -7;
      0004BB 7F F9            [12] 2387 	mov	r7,#0xf9
                           0004BD  2388 	C$main.c$297$2$148 ==.
                                   2389 ;	main.c:297: }
                           0004BD  2390 	C$main.c$300$1$139 ==.
                                   2391 ;	main.c:300: cmperr:
      0004BD 80 DB            [24] 2392 	sjmp	00150$
      0004BF                       2393 00148$:
                           0004BF  2394 	C$main.c$301$1$139 ==.
                                   2395 ;	main.c:301: flash_lock();
      0004BF 12r00r00         [24] 2396 	lcall	_flash_lock
                           0004C2  2397 	C$main.c$302$1$139 ==.
                                   2398 ;	main.c:302: return -6;
      0004C2 75 82 FA         [24] 2399 	mov	dpl,#0xfa
                           0004C5  2400 	C$main.c$304$1$139 ==.
                                   2401 ;	main.c:304: ferr:
      0004C5 80 09            [24] 2402 	sjmp	00152$
      0004C7                       2403 00149$:
                           0004C7  2404 	C$main.c$305$1$139 ==.
                                   2405 ;	main.c:305: flash_lock();
      0004C7 C0 07            [24] 2406 	push	ar7
      0004C9 12r00r00         [24] 2407 	lcall	_flash_lock
      0004CC D0 07            [24] 2408 	pop	ar7
                           0004CE  2409 	C$main.c$306$1$139 ==.
                                   2410 ;	main.c:306: return st;
      0004CE 8F 82            [24] 2411 	mov	dpl,r7
      0004D0                       2412 00152$:
                           0004D0  2413 	C$main.c$307$1$139 ==.
                           0004D0  2414 	XFmain$flash_line$0$0 ==.
      0004D0 22               [24] 2415 	ret
                                   2416 ;------------------------------------------------------------
                                   2417 ;Allocation info for local variables in function 'parse_ihex'
                                   2418 ;------------------------------------------------------------
                                   2419 ;i                         Allocated to registers r5 r6 
                                   2420 ;s                         Allocated to registers r7 
                                   2421 ;val                       Allocated to registers r4 
                                   2422 ;cnt                       Allocated to registers r3 
                                   2423 ;ch                        Allocated to registers r2 
                                   2424 ;------------------------------------------------------------
                           0004D1  2425 	Fmain$parse_ihex$0$0 ==.
                           0004D1  2426 	C$main.c$309$1$139 ==.
                                   2427 ;	main.c:309: static int8_t parse_ihex(void)
                                   2428 ;	-----------------------------------------
                                   2429 ;	 function parse_ihex
                                   2430 ;	-----------------------------------------
      0004D1                       2431 _parse_ihex:
                           0004D1  2432 	C$main.c$312$1$139 ==.
                                   2433 ;	main.c:312: uint8_t s = 0;
      0004D1 7F 00            [12] 2434 	mov	r7,#0x00
                           0004D3  2435 	C$main.c$313$1$151 ==.
                                   2436 ;	main.c:313: do {
      0004D3 7D 00            [12] 2437 	mov	r5,#0x00
      0004D5 7E 00            [12] 2438 	mov	r6,#0x00
      0004D7                       2439 00110$:
                           0004D7  2440 	C$main.c$314$2$151 ==.
                                   2441 ;	main.c:314: uint8_t val = 0;
      0004D7 7C 00            [12] 2442 	mov	r4,#0x00
                           0004D9  2443 	C$main.c$315$2$151 ==.
                                   2444 ;	main.c:315: uint8_t cnt = 2;
      0004D9 7B 02            [12] 2445 	mov	r3,#0x02
                           0004DB  2446 	C$main.c$316$2$152 ==.
                                   2447 ;	main.c:316: do {
      0004DB                       2448 00107$:
                           0004DB  2449 	C$main.c$317$3$153 ==.
                                   2450 ;	main.c:317: uint8_t ch = getch();
      0004DB C0 07            [24] 2451 	push	ar7
      0004DD C0 06            [24] 2452 	push	ar6
      0004DF C0 05            [24] 2453 	push	ar5
      0004E1 C0 04            [24] 2454 	push	ar4
      0004E3 C0 03            [24] 2455 	push	ar3
      0004E5 12r00r53         [24] 2456 	lcall	_getch
      0004E8 AA 82            [24] 2457 	mov	r2,dpl
      0004EA D0 03            [24] 2458 	pop	ar3
      0004EC D0 04            [24] 2459 	pop	ar4
      0004EE D0 05            [24] 2460 	pop	ar5
      0004F0 D0 06            [24] 2461 	pop	ar6
      0004F2 D0 07            [24] 2462 	pop	ar7
                           0004F4  2463 	C$main.c$318$3$153 ==.
                                   2464 ;	main.c:318: val <<= 4;
      0004F4 EC               [12] 2465 	mov	a,r4
      0004F5 C4               [12] 2466 	swap	a
      0004F6 54 F0            [12] 2467 	anl	a,#0xf0
      0004F8 FC               [12] 2468 	mov	r4,a
                           0004F9  2469 	C$main.c$319$3$153 ==.
                                   2470 ;	main.c:319: ch -= '0';
      0004F9 8A 01            [24] 2471 	mov	ar1,r2
      0004FB E9               [12] 2472 	mov	a,r1
      0004FC 24 D0            [12] 2473 	add	a,#0xd0
      0004FE FA               [12] 2474 	mov	r2,a
                           0004FF  2475 	C$main.c$320$3$153 ==.
                                   2476 ;	main.c:320: if (ch < 10) {
      0004FF BA 0A 00         [24] 2477 	cjne	r2,#0x0a,00151$
      000502                       2478 00151$:
      000502 50 05            [24] 2479 	jnc	00102$
                           000504  2480 	C$main.c$321$4$154 ==.
                                   2481 ;	main.c:321: val |= ch;
      000504 EA               [12] 2482 	mov	a,r2
      000505 42 04            [12] 2483 	orl	ar4,a
                           000507  2484 	C$main.c$322$4$154 ==.
                                   2485 ;	main.c:322: continue;
      000507 80 29            [24] 2486 	sjmp	00108$
      000509                       2487 00102$:
                           000509  2488 	C$main.c$324$3$153 ==.
                                   2489 ;	main.c:324: ch -= ('A' - '0');
      000509 8A 01            [24] 2490 	mov	ar1,r2
      00050B E9               [12] 2491 	mov	a,r1
      00050C 24 EF            [12] 2492 	add	a,#0xef
      00050E FA               [12] 2493 	mov	r2,a
                           00050F  2494 	C$main.c$325$3$153 ==.
                                   2495 ;	main.c:325: if (ch < 6) {
      00050F BA 06 00         [24] 2496 	cjne	r2,#0x06,00153$
      000512                       2497 00153$:
      000512 50 07            [24] 2498 	jnc	00104$
                           000514  2499 	C$main.c$326$4$155 ==.
                                   2500 ;	main.c:326: val |= ch + 10;
      000514 74 0A            [12] 2501 	mov	a,#0x0a
      000516 2A               [12] 2502 	add	a,r2
      000517 42 04            [12] 2503 	orl	ar4,a
                           000519  2504 	C$main.c$327$4$155 ==.
                                   2505 ;	main.c:327: continue;
      000519 80 17            [24] 2506 	sjmp	00108$
      00051B                       2507 00104$:
                           00051B  2508 	C$main.c$329$3$153 ==.
                                   2509 ;	main.c:329: ch -= ('a' - 'A');
      00051B 8A 01            [24] 2510 	mov	ar1,r2
      00051D E9               [12] 2511 	mov	a,r1
      00051E 24 E0            [12] 2512 	add	a,#0xe0
      000520 FA               [12] 2513 	mov	r2,a
                           000521  2514 	C$main.c$330$3$153 ==.
                                   2515 ;	main.c:330: if (ch < 6) {
      000521 BA 06 00         [24] 2516 	cjne	r2,#0x06,00155$
      000524                       2517 00155$:
      000524 50 07            [24] 2518 	jnc	00106$
                           000526  2519 	C$main.c$331$4$156 ==.
                                   2520 ;	main.c:331: val |= ch + 10;
      000526 74 0A            [12] 2521 	mov	a,#0x0a
      000528 2A               [12] 2522 	add	a,r2
      000529 42 04            [12] 2523 	orl	ar4,a
                           00052B  2524 	C$main.c$332$4$156 ==.
                                   2525 ;	main.c:332: continue;
      00052B 80 05            [24] 2526 	sjmp	00108$
      00052D                       2527 00106$:
                           00052D  2528 	C$main.c$334$3$153 ==.
                                   2529 ;	main.c:334: return -3;
      00052D 75 82 FD         [24] 2530 	mov	dpl,#0xfd
      000530 80 55            [24] 2531 	sjmp	00117$
      000532                       2532 00108$:
                           000532  2533 	C$main.c$335$2$152 ==.
                                   2534 ;	main.c:335: } while (--cnt);
      000532 EB               [12] 2535 	mov	a,r3
      000533 14               [12] 2536 	dec	a
      000534 FA               [12] 2537 	mov	r2,a
      000535 FB               [12] 2538 	mov	r3,a
      000536 70 A3            [24] 2539 	jnz	00107$
                           000538  2540 	C$main.c$336$2$152 ==.
                                   2541 ;	main.c:336: line_buffer[i++] = val;
      000538 8D 02            [24] 2542 	mov	ar2,r5
      00053A 8E 03            [24] 2543 	mov	ar3,r6
      00053C 0D               [12] 2544 	inc	r5
      00053D BD 00 01         [24] 2545 	cjne	r5,#0x00,00158$
      000540 0E               [12] 2546 	inc	r6
      000541                       2547 00158$:
      000541 EA               [12] 2548 	mov	a,r2
      000542 24r04            [12] 2549 	add	a,#_line_buffer
      000544 F5 82            [12] 2550 	mov	dpl,a
      000546 EB               [12] 2551 	mov	a,r3
      000547 34s00            [12] 2552 	addc	a,#(_line_buffer >> 8)
      000549 F5 83            [12] 2553 	mov	dph,a
      00054B EC               [12] 2554 	mov	a,r4
      00054C F0               [24] 2555 	movx	@dptr,a
                           00054D  2556 	C$main.c$337$2$152 ==.
                                   2557 ;	main.c:337: s += val;
      00054D EC               [12] 2558 	mov	a,r4
      00054E 2F               [12] 2559 	add	a,r7
      00054F FF               [12] 2560 	mov	r7,a
                           000550  2561 	C$main.c$338$1$151 ==.
                                   2562 ;	main.c:338: } while (i < 5 + line_buffer[0]);
      000550 90r00r04         [24] 2563 	mov	dptr,#_line_buffer
      000553 E0               [24] 2564 	movx	a,@dptr
      000554 FC               [12] 2565 	mov	r4,a
      000555 7B 00            [12] 2566 	mov	r3,#0x00
      000557 74 05            [12] 2567 	mov	a,#0x05
      000559 2C               [12] 2568 	add	a,r4
      00055A FC               [12] 2569 	mov	r4,a
      00055B E4               [12] 2570 	clr	a
      00055C 3B               [12] 2571 	addc	a,r3
      00055D FB               [12] 2572 	mov	r3,a
      00055E C3               [12] 2573 	clr	c
      00055F ED               [12] 2574 	mov	a,r5
      000560 9C               [12] 2575 	subb	a,r4
      000561 EE               [12] 2576 	mov	a,r6
      000562 9B               [12] 2577 	subb	a,r3
      000563 50 03            [24] 2578 	jnc	00159$
      000565 02r04rD7         [24] 2579 	ljmp	00110$
      000568                       2580 00159$:
                           000568  2581 	C$main.c$339$1$151 ==.
                                   2582 ;	main.c:339: if (s)
      000568 EF               [12] 2583 	mov	a,r7
      000569 60 05            [24] 2584 	jz	00114$
                           00056B  2585 	C$main.c$340$1$151 ==.
                                   2586 ;	main.c:340: return -4;
      00056B 75 82 FC         [24] 2587 	mov	dpl,#0xfc
      00056E 80 17            [24] 2588 	sjmp	00117$
      000570                       2589 00114$:
                           000570  2590 	C$main.c$341$1$151 ==.
                                   2591 ;	main.c:341: if (line_buffer[3])
      000570 90r00r07         [24] 2592 	mov	dptr,#(_line_buffer + 0x0003)
      000573 E0               [24] 2593 	movx	a,@dptr
      000574 FF               [12] 2594 	mov	r7,a
      000575 60 0D            [24] 2595 	jz	00116$
                           000577  2596 	C$main.c$342$1$151 ==.
                                   2597 ;	main.c:342: return (line_buffer[3] == 1) ? 0 : -5;
      000577 BF 01 04         [24] 2598 	cjne	r7,#0x01,00119$
      00057A 7F 00            [12] 2599 	mov	r7,#0x00
      00057C 80 02            [24] 2600 	sjmp	00120$
      00057E                       2601 00119$:
      00057E 7F FB            [12] 2602 	mov	r7,#0xfb
      000580                       2603 00120$:
      000580 8F 82            [24] 2604 	mov	dpl,r7
      000582 80 03            [24] 2605 	sjmp	00117$
      000584                       2606 00116$:
                           000584  2607 	C$main.c$343$1$151 ==.
                                   2608 ;	main.c:343: return flash_line();
      000584 12r02r81         [24] 2609 	lcall	_flash_line
      000587                       2610 00117$:
                           000587  2611 	C$main.c$344$1$151 ==.
                           000587  2612 	XFmain$parse_ihex$0$0 ==.
      000587 22               [24] 2613 	ret
                                   2614 ;------------------------------------------------------------
                                   2615 ;Allocation info for local variables in function 'write_banner'
                                   2616 ;------------------------------------------------------------
                                   2617 ;crc                       Allocated to registers r6 r7 
                                   2618 ;------------------------------------------------------------
                           000588  2619 	Fmain$write_banner$0$0 ==.
                           000588  2620 	C$main.c$346$1$151 ==.
                                   2621 ;	main.c:346: static void write_banner(void)
                                   2622 ;	-----------------------------------------
                                   2623 ;	 function write_banner
                                   2624 ;	-----------------------------------------
      000588                       2625 _write_banner:
                           000588  2626 	C$main.c$350$1$158 ==.
                                   2627 ;	main.c:350: uint16_t crc = crc_crc16((const __code uint8_t *)(((uint16_t)bootloader_reset_vector_hi()) << 8),
      000588 7Fs00            [12] 2628 	mov	r7,#(__sdcc_gsinit_startup >> 8)
      00058A 8F 06            [24] 2629 	mov	ar6,r7
      00058C 74 FC            [12] 2630 	mov	a,#0xfc
      00058E C3               [12] 2631 	clr	c
      00058F 9E               [12] 2632 	subb	a,r6
      000590 FD               [12] 2633 	mov	r5,a
      000591 7F 00            [12] 2634 	mov	r7,#0x00
      000593 8E 04            [24] 2635 	mov	ar4,r6
      000595 7E 00            [12] 2636 	mov	r6,#0x00
      000597 7B 80            [12] 2637 	mov	r3,#0x80
      000599 74 FF            [12] 2638 	mov	a,#0xff
      00059B C0 E0            [24] 2639 	push	acc
      00059D C0 E0            [24] 2640 	push	acc
      00059F C0 07            [24] 2641 	push	ar7
      0005A1 C0 05            [24] 2642 	push	ar5
      0005A3 8E 82            [24] 2643 	mov	dpl,r6
      0005A5 8C 83            [24] 2644 	mov	dph,r4
      0005A7 8B F0            [24] 2645 	mov	b,r3
      0005A9 12r00r00         [24] 2646 	lcall	_crc_crc16
      0005AC AE 82            [24] 2647 	mov	r6,dpl
      0005AE AF 83            [24] 2648 	mov	r7,dph
      0005B0 E5 81            [12] 2649 	mov	a,sp
      0005B2 24 FC            [12] 2650 	add	a,#0xfc
      0005B4 F5 81            [12] 2651 	mov	sp,a
                           0005B6  2652 	C$main.c$352$1$158 ==.
                                   2653 ;	main.c:352: uart0_writestr(uart_banner);
      0005B6 90r00r00         [24] 2654 	mov	dptr,#_write_banner_uart_banner_1_158
      0005B9 75 F0 80         [24] 2655 	mov	b,#0x80
      0005BC C0 07            [24] 2656 	push	ar7
      0005BE C0 06            [24] 2657 	push	ar6
      0005C0 12r00r00         [24] 2658 	lcall	_uart0_writestr
      0005C3 D0 06            [24] 2659 	pop	ar6
      0005C5 D0 07            [24] 2660 	pop	ar7
                           0005C7  2661 	C$main.c$353$1$158 ==.
                                   2662 ;	main.c:353: uart0_writehex16(crc, 4, WRNUM_PADZERO);
      0005C7 74 08            [12] 2663 	mov	a,#0x08
      0005C9 C0 E0            [24] 2664 	push	acc
      0005CB 03               [12] 2665 	rr	a
      0005CC C0 E0            [24] 2666 	push	acc
      0005CE 8E 82            [24] 2667 	mov	dpl,r6
      0005D0 8F 83            [24] 2668 	mov	dph,r7
      0005D2 12r00r00         [24] 2669 	lcall	_uart0_writehex16
      0005D5 15 81            [12] 2670 	dec	sp
      0005D7 15 81            [12] 2671 	dec	sp
                           0005D9  2672 	C$main.c$354$1$158 ==.
                                   2673 ;	main.c:354: uart0_writestr(uart_crlf);
      0005D9 90r00r23         [24] 2674 	mov	dptr,#_write_banner_uart_crlf_1_158
      0005DC 75 F0 80         [24] 2675 	mov	b,#0x80
      0005DF 12r00r00         [24] 2676 	lcall	_uart0_writestr
                           0005E2  2677 	C$main.c$355$1$158 ==.
                           0005E2  2678 	XFmain$write_banner$0$0 ==.
      0005E2 22               [24] 2679 	ret
                                   2680 ;------------------------------------------------------------
                                   2681 ;Allocation info for local variables in function '_sdcc_external_startup'
                                   2682 ;------------------------------------------------------------
                           0005E3  2683 	G$_sdcc_external_startup$0$0 ==.
                           0005E3  2684 	C$main.c$357$1$158 ==.
                                   2685 ;	main.c:357: uint8_t _sdcc_external_startup(void)
                                   2686 ;	-----------------------------------------
                                   2687 ;	 function _sdcc_external_startup
                                   2688 ;	-----------------------------------------
      0005E3                       2689 __sdcc_external_startup:
                           0005E3  2690 	C$main.c$359$1$160 ==.
                                   2691 ;	main.c:359: DPS = 0x00;
      0005E3 75 86 00         [24] 2692 	mov	_DPS,#0x00
                           0005E6  2693 	C$main.c$360$1$160 ==.
                                   2694 ;	main.c:360: ANALOGA = 0x3F;
      0005E6 90 70 07         [24] 2695 	mov	dptr,#_ANALOGA
      0005E9 74 3F            [12] 2696 	mov	a,#0x3f
      0005EB F0               [24] 2697 	movx	@dptr,a
                           0005EC  2698 	C$main.c$361$1$160 ==.
                                   2699 ;	main.c:361: PORTA = 0xC0;
      0005EC 75 80 C0         [24] 2700 	mov	_PORTA,#0xc0
                           0005EF  2701 	C$main.c$362$1$160 ==.
                                   2702 ;	main.c:362: DIRA = 0x00;
      0005EF 75 89 00         [24] 2703 	mov	_DIRA,#0x00
                           0005F2  2704 	C$main.c$363$1$160 ==.
                                   2705 ;	main.c:363: PORTB = 0xFC;
      0005F2 75 88 FC         [24] 2706 	mov	_PORTB,#0xfc
                           0005F5  2707 	C$main.c$364$1$160 ==.
                                   2708 ;	main.c:364: DIRB = 0x13;
      0005F5 75 8A 13         [24] 2709 	mov	_DIRB,#0x13
                           0005F8  2710 	C$main.c$365$1$160 ==.
                                   2711 ;	main.c:365: PALTB = 0x10;
      0005F8 90 70 09         [24] 2712 	mov	dptr,#_PALTB
      0005FB 74 10            [12] 2713 	mov	a,#0x10
      0005FD F0               [24] 2714 	movx	@dptr,a
                           0005FE  2715 	C$main.c$366$1$160 ==.
                                   2716 ;	main.c:366: PORTC = 0xF3;
      0005FE 75 90 F3         [24] 2717 	mov	_PORTC,#0xf3
                           000601  2718 	C$main.c$367$1$160 ==.
                                   2719 ;	main.c:367: DIRC = 0x0F;
      000601 75 8B 0F         [24] 2720 	mov	_DIRC,#0x0f
                           000604  2721 	C$main.c$368$1$160 ==.
                                   2722 ;	main.c:368: PORTR = 0xFF;
      000604 75 8C FF         [24] 2723 	mov	_PORTR,#0xff
                           000607  2724 	C$main.c$369$1$160 ==.
                                   2725 ;	main.c:369: DIRR = 0x15;
      000607 75 8E 15         [24] 2726 	mov	_DIRR,#0x15
                           00060A  2727 	C$main.c$370$1$160 ==.
                                   2728 ;	main.c:370: RADIOMUX = 0x47;
      00060A 90 70 44         [24] 2729 	mov	dptr,#_RADIOMUX
      00060D 74 47            [12] 2730 	mov	a,#0x47
      00060F F0               [24] 2731 	movx	@dptr,a
                           000610  2732 	C$main.c$371$1$160 ==.
                                   2733 ;	main.c:371: RADIOACC = 0x00;
      000610 75 B1 00         [24] 2734 	mov	_RADIOACC,#0x00
                           000613  2735 	C$main.c$372$1$160 ==.
                                   2736 ;	main.c:372: return 0;
      000613 75 82 00         [24] 2737 	mov	dpl,#0x00
                           000616  2738 	C$main.c$373$1$160 ==.
                           000616  2739 	XG$_sdcc_external_startup$0$0 ==.
      000616 22               [24] 2740 	ret
                                   2741 ;------------------------------------------------------------
                                   2742 ;Allocation info for local variables in function 'bootloader'
                                   2743 ;------------------------------------------------------------
                                   2744 ;i                         Allocated to registers r7 
                                   2745 ;oc                        Allocated to registers r6 
                                   2746 ;ch                        Allocated to registers r7 
                                   2747 ;st                        Allocated to registers r7 
                                   2748 ;st                        Allocated to registers r7 
                                   2749 ;st                        Allocated to registers r7 
                                   2750 ;vdd                       Allocated to registers r6 r7 
                                   2751 ;------------------------------------------------------------
                           000617  2752 	G$bootloader$0$0 ==.
                           000617  2753 	C$main.c$379$1$160 ==.
                                   2754 ;	main.c:379: void bootloader(void)
                                   2755 ;	-----------------------------------------
                                   2756 ;	 function bootloader
                                   2757 ;	-----------------------------------------
      000617                       2758 _bootloader:
                           000617  2759 	C$main.c$424$1$162 ==.
                                   2760 ;	main.c:424: __endasm;
                                   2761 	.area	HOME (CODE)
                                   2762 	.area	UART0S0 (CODE)
                                   2763 	.area	UART0S1 (CODE)
                                   2764 	.area	UART0S2 (CODE)
                                   2765 	.area	UART0S3 (CODE)
                                   2766 	.area	UART0S4 (CODE)
                                   2767 	.area	UART0S5 (CODE)
                                   2768 	.area	WTCANSLP0 (CODE)
                                   2769 	.area	WTCANSLP1 (CODE)
                                   2770 	.area	WTCANSLP2 (CODE)
                                   2771 	.area	WTSTDBY0 (CODE)
                                   2772 	.area	WTSTDBY1 (CODE)
                                   2773 	.area	WTSTDBY2 (CODE)
                                   2774 	.area	SSEG (DATA)
      000000                       2775 	__start__stack:
      000000                       2776 	.ds	1
                                   2777 	.area	CSEG (CODE)
                           000000  2778 	G$_start__stack$0$0	= __start__stack
                                   2779 	.globl	G$_start__stack$0$0
                           000617  2780 	C$main.c$427$1$162 ==.
                                   2781 ;	main.c:427: flash_apply_calibration();
      000617 12r00r00         [24] 2782 	lcall	_flash_apply_calibration
                           00061A  2783 	C$main.c$428$1$162 ==.
                                   2784 ;	main.c:428: CLKCON = 0x00;
      00061A 75 C6 00         [24] 2785 	mov	_CLKCON,#0x00
                           00061D  2786 	C$main.c$431$1$162 ==.
                                   2787 ;	main.c:431: if (PINB & 0x08 && jmp_vector != 0xFFFF) {
      00061D E5 E8            [12] 2788 	mov	a,_PINB
      00061F 30 E3 15         [24] 2789 	jnb	acc.3,00102$
      000622 90 E3 FE         [24] 2790 	mov	dptr,#_jmp_vector
      000625 E4               [12] 2791 	clr	a
      000626 93               [24] 2792 	movc	a,@a+dptr
      000627 FE               [12] 2793 	mov	r6,a
      000628 74 01            [12] 2794 	mov	a,#0x01
      00062A 93               [24] 2795 	movc	a,@a+dptr
      00062B FF               [12] 2796 	mov	r7,a
      00062C BE FF 05         [24] 2797 	cjne	r6,#0xff,00252$
      00062F BF FF 02         [24] 2798 	cjne	r7,#0xff,00252$
      000632 80 03            [24] 2799 	sjmp	00102$
      000634                       2800 00252$:
                           000634  2801 	C$main.c$432$2$163 ==.
                                   2802 ;	main.c:432: run_application();
      000634 12r00r00         [24] 2803 	lcall	_run_application
      000637                       2804 00102$:
                           000637  2805 	C$main.c$437$1$162 ==.
                                   2806 ;	main.c:437: FRCOSCREF = 19531;
      000637 90 70 74         [24] 2807 	mov	dptr,#_FRCOSCREF
      00063A 74 4B            [12] 2808 	mov	a,#0x4b
      00063C F0               [24] 2809 	movx	@dptr,a
      00063D 04               [12] 2810 	inc	a
      00063E A3               [24] 2811 	inc	dptr
      00063F F0               [24] 2812 	movx	@dptr,a
                           000640  2813 	C$main.c$438$1$162 ==.
                                   2814 ;	main.c:438: FRCOSCKFILT = 2800; /* theoretical maximum is 71582 */
      000640 90 70 72         [24] 2815 	mov	dptr,#_FRCOSCKFILT
      000643 74 F0            [12] 2816 	mov	a,#0xf0
      000645 F0               [24] 2817 	movx	@dptr,a
      000646 74 0A            [12] 2818 	mov	a,#0x0a
      000648 A3               [24] 2819 	inc	dptr
      000649 F0               [24] 2820 	movx	@dptr,a
                           00064A  2821 	C$main.c$439$1$162 ==.
                                   2822 ;	main.c:439: LPXOSCGM = 0x90;
      00064A 90 70 54         [24] 2823 	mov	dptr,#_LPXOSCGM
      00064D 74 90            [12] 2824 	mov	a,#0x90
      00064F F0               [24] 2825 	movx	@dptr,a
                           000650  2826 	C$main.c$440$1$162 ==.
                                   2827 ;	main.c:440: OSCFORCERUN |= 0x04;
      000650 90 70 50         [24] 2828 	mov	dptr,#_OSCFORCERUN
      000653 E0               [24] 2829 	movx	a,@dptr
      000654 FF               [12] 2830 	mov	r7,a
      000655 74 04            [12] 2831 	mov	a,#0x04
      000657 4F               [12] 2832 	orl	a,r7
      000658 F0               [24] 2833 	movx	@dptr,a
                           000659  2834 	C$main.c$441$1$162 ==.
                                   2835 ;	main.c:441: FRCOSCCONFIG = (6 << 3) | CLKSRC_LPXOSC;
      000659 90 70 70         [24] 2836 	mov	dptr,#_FRCOSCCONFIG
      00065C 74 33            [12] 2837 	mov	a,#0x33
      00065E F0               [24] 2838 	movx	@dptr,a
                           00065F  2839 	C$main.c$443$1$162 ==.
                                   2840 ;	main.c:443: WTCFGB = (1 << 3) | CLKSRC_LPXOSC;
      00065F 75 F9 0B         [24] 2841 	mov	_WTCFGB,#0x0b
                           000662  2842 	C$main.c$446$2$162 ==.
                                   2843 ;	main.c:446: uint8_t i = 128;
      000662 7F 80            [12] 2844 	mov	r7,#0x80
                           000664  2845 	C$main.c$447$2$164 ==.
                                   2846 ;	main.c:447: PORTC_3 = 1;
      000664 D2 93            [12] 2847 	setb	_PORTC_3
                           000666  2848 	C$main.c$448$2$164 ==.
                                   2849 ;	main.c:448: OSCCALIB = 0x01;
      000666 90 70 53         [24] 2850 	mov	dptr,#_OSCCALIB
      000669 74 01            [12] 2851 	mov	a,#0x01
      00066B F0               [24] 2852 	movx	@dptr,a
                           00066C  2853 	C$main.c$449$2$164 ==.
                                   2854 ;	main.c:449: IE_5 = 1;
      00066C D2 AD            [12] 2855 	setb	_IE_5
                           00066E  2856 	C$main.c$457$3$165 ==.
                                   2857 ;	main.c:457: FRCOSCFREQ1;
      00066E                       2858 00149$:
                           00066E  2859 	C$main.c$452$4$165 ==.
                                   2860 ;	main.c:452: uint8_t oc = OSCCALIB;
      00066E 90 70 53         [24] 2861 	mov	dptr,#_OSCCALIB
      000671 E0               [24] 2862 	movx	a,@dptr
                           000672  2863 	C$main.c$453$4$166 ==.
                                   2864 ;	main.c:453: if (oc & 0x40)
      000672 FE               [12] 2865 	mov	r6,a
      000673 20 E6 05         [24] 2866 	jb	acc.6,00106$
                           000676  2867 	C$main.c$455$4$166 ==.
                                   2868 ;	main.c:455: enter_standby();
      000676 12r00r00         [24] 2869 	lcall	_enter_standby
      000679 80 F3            [24] 2870 	sjmp	00149$
      00067B                       2871 00106$:
                           00067B  2872 	C$main.c$457$3$165 ==.
                                   2873 ;	main.c:457: FRCOSCFREQ1;
      00067B 90 70 77         [24] 2874 	mov	dptr,#_FRCOSCFREQ1
      00067E E0               [24] 2875 	movx	a,@dptr
                           00067F  2876 	C$main.c$458$2$164 ==.
                                   2877 ;	main.c:458: } while (--i);
      00067F EF               [12] 2878 	mov	a,r7
      000680 14               [12] 2879 	dec	a
      000681 FE               [12] 2880 	mov	r6,a
      000682 FF               [12] 2881 	mov	r7,a
      000683 70 E9            [24] 2882 	jnz	00149$
                           000685  2883 	C$main.c$459$2$164 ==.
                                   2884 ;	main.c:459: IE_5 = 0;
      000685 C2 AD            [12] 2885 	clr	_IE_5
                           000687  2886 	C$main.c$460$2$164 ==.
                                   2887 ;	main.c:460: OSCCALIB = 0x00;
      000687 90 70 53         [24] 2888 	mov	dptr,#_OSCCALIB
      00068A E4               [12] 2889 	clr	a
      00068B F0               [24] 2890 	movx	@dptr,a
                           00068C  2891 	C$main.c$461$2$164 ==.
                                   2892 ;	main.c:461: PORTC_3 = 0;
      00068C C2 93            [12] 2893 	clr	_PORTC_3
                           00068E  2894 	C$main.c$465$1$162 ==.
                                   2895 ;	main.c:465: ADCCH0CONFIG = 0xD9;
      00068E 75 CA D9         [24] 2896 	mov	_ADCCH0CONFIG,#0xd9
                           000691  2897 	C$main.c$466$1$162 ==.
                                   2898 ;	main.c:466: ADCCH1CONFIG = 0xD9;
      000691 75 CB D9         [24] 2899 	mov	_ADCCH1CONFIG,#0xd9
                           000694  2900 	C$main.c$467$1$162 ==.
                                   2901 ;	main.c:467: ADCCH2CONFIG = 0xD9;
      000694 75 D2 D9         [24] 2902 	mov	_ADCCH2CONFIG,#0xd9
                           000697  2903 	C$main.c$468$1$162 ==.
                                   2904 ;	main.c:468: ADCCH3CONFIG = 0xD9;
      000697 75 D3 D9         [24] 2905 	mov	_ADCCH3CONFIG,#0xd9
                           00069A  2906 	C$main.c$470$1$162 ==.
                                   2907 ;	main.c:470: orig_jmp_vector_mask = 0;
      00069A 90r00r03         [24] 2908 	mov	dptr,#_orig_jmp_vector_mask
      00069D E4               [12] 2909 	clr	a
      00069E F0               [24] 2910 	movx	@dptr,a
                           00069F  2911 	C$main.c$472$1$162 ==.
                                   2912 ;	main.c:472: uart_timer0_baud(CLKSRC_FRCOSC, 38400, 20000000);
      00069F C0 E0            [24] 2913 	push	acc
      0006A1 74 2D            [12] 2914 	mov	a,#0x2d
      0006A3 C0 E0            [24] 2915 	push	acc
      0006A5 74 31            [12] 2916 	mov	a,#0x31
      0006A7 C0 E0            [24] 2917 	push	acc
      0006A9 74 01            [12] 2918 	mov	a,#0x01
      0006AB C0 E0            [24] 2919 	push	acc
      0006AD E4               [12] 2920 	clr	a
      0006AE C0 E0            [24] 2921 	push	acc
      0006B0 74 96            [12] 2922 	mov	a,#0x96
      0006B2 C0 E0            [24] 2923 	push	acc
      0006B4 E4               [12] 2924 	clr	a
      0006B5 C0 E0            [24] 2925 	push	acc
      0006B7 C0 E0            [24] 2926 	push	acc
      0006B9 75 82 00         [24] 2927 	mov	dpl,#0x00
      0006BC 12r00r00         [24] 2928 	lcall	_uart_timer0_baud
      0006BF E5 81            [12] 2929 	mov	a,sp
      0006C1 24 F8            [12] 2930 	add	a,#0xf8
      0006C3 F5 81            [12] 2931 	mov	sp,a
                           0006C5  2932 	C$main.c$473$1$162 ==.
                                   2933 ;	main.c:473: uart0_init(0, 8, 1);
      0006C5 75*00 08         [24] 2934 	mov	_uart0_init_PARM_2,#0x08
      0006C8 75*00 01         [24] 2935 	mov	_uart0_init_PARM_3,#0x01
      0006CB 75 82 00         [24] 2936 	mov	dpl,#0x00
      0006CE 12r00r00         [24] 2937 	lcall	_uart0_init
                           0006D1  2938 	C$main.c$481$1$162 ==.
                                   2939 ;	main.c:481: write_banner();
      0006D1 12r05r88         [24] 2940 	lcall	_write_banner
      0006D4                       2941 00151$:
                           0006D4  2942 	C$main.c$484$2$167 ==.
                                   2943 ;	main.c:484: char ch = getch();
      0006D4 12r00r53         [24] 2944 	lcall	_getch
      0006D7 AF 82            [24] 2945 	mov	r7,dpl
                           0006D9  2946 	C$main.c$485$2$167 ==.
                                   2947 ;	main.c:485: switch (ch) {
      0006D9 BF 0A 02         [24] 2948 	cjne	r7,#0x0a,00255$
      0006DC 80 F6            [24] 2949 	sjmp	00151$
      0006DE                       2950 00255$:
      0006DE BF 0D 02         [24] 2951 	cjne	r7,#0x0d,00256$
      0006E1 80 F1            [24] 2952 	sjmp	00151$
      0006E3                       2953 00256$:
      0006E3 BF 20 02         [24] 2954 	cjne	r7,#0x20,00257$
      0006E6 80 EC            [24] 2955 	sjmp	00151$
      0006E8                       2956 00257$:
      0006E8 BF 3A 03         [24] 2957 	cjne	r7,#0x3a,00258$
      0006EB 02r07rF0         [24] 2958 	ljmp	00134$
      0006EE                       2959 00258$:
      0006EE BF 3F 02         [24] 2960 	cjne	r7,#0x3f,00259$
      0006F1 80 1A            [24] 2961 	sjmp	00113$
      0006F3                       2962 00259$:
      0006F3 BF 4B 02         [24] 2963 	cjne	r7,#0x4b,00260$
      0006F6 80 20            [24] 2964 	sjmp	00114$
      0006F8                       2965 00260$:
      0006F8 BF 52 03         [24] 2966 	cjne	r7,#0x52,00261$
      0006FB 02r07rAF         [24] 2967 	ljmp	00128$
      0006FE                       2968 00261$:
      0006FE BF 56 03         [24] 2969 	cjne	r7,#0x56,00262$
      000701 02r08r71         [24] 2970 	ljmp	00145$
      000704                       2971 00262$:
      000704 BF 5A 03         [24] 2972 	cjne	r7,#0x5a,00263$
      000707 02r07r78         [24] 2973 	ljmp	00123$
      00070A                       2974 00263$:
      00070A 02r08rDD         [24] 2975 	ljmp	00146$
                           00070D  2976 	C$main.c$491$3$168 ==.
                                   2977 ;	main.c:491: case '?':
      00070D                       2978 00113$:
                           00070D  2979 	C$main.c$492$3$168 ==.
                                   2980 ;	main.c:492: uart0_wait_txfree(63);
      00070D 75 82 3F         [24] 2981 	mov	dpl,#0x3f
      000710 12r00r00         [24] 2982 	lcall	_uart0_wait_txfree
                           000713  2983 	C$main.c$493$3$168 ==.
                                   2984 ;	main.c:493: write_banner();
      000713 12r05r88         [24] 2985 	lcall	_write_banner
                           000716  2986 	C$main.c$494$3$168 ==.
                                   2987 ;	main.c:494: break;
                           000716  2988 	C$main.c$496$3$168 ==.
                                   2989 ;	main.c:496: case 'K':
      000716 80 BC            [24] 2990 	sjmp	00151$
      000718                       2991 00114$:
                           000718  2992 	C$main.c$498$4$169 ==.
                                   2993 ;	main.c:498: int8_t st = erase_app();
      000718 12r01rCA         [24] 2994 	lcall	_erase_app
                           00071B  2995 	C$main.c$499$4$169 ==.
                                   2996 ;	main.c:499: if (!st)
      00071B E5 82            [12] 2997 	mov	a,dpl
      00071D FF               [12] 2998 	mov	r7,a
      00071E 70 05            [24] 2999 	jnz	00116$
                           000720  3000 	C$main.c$500$4$169 ==.
                                   3001 ;	main.c:500: st = check_app_erased();
      000720 12r02r1D         [24] 3002 	lcall	_check_app_erased
      000723 AF 82            [24] 3003 	mov	r7,dpl
      000725                       3004 00116$:
                           000725  3005 	C$main.c$501$4$169 ==.
                                   3006 ;	main.c:501: uart0_wait_txfree(63);
      000725 75 82 3F         [24] 3007 	mov	dpl,#0x3f
      000728 12r00r00         [24] 3008 	lcall	_uart0_wait_txfree
                           00072B  3009 	C$main.c$502$4$169 ==.
                                   3010 ;	main.c:502: switch (st) {
      00072B BF FC 02         [24] 3011 	cjne	r7,#0xfc,00265$
      00072E 80 30            [24] 3012 	sjmp	00120$
      000730                       3013 00265$:
      000730 BF FD 02         [24] 3014 	cjne	r7,#0xfd,00266$
      000733 80 1F            [24] 3015 	sjmp	00119$
      000735                       3016 00266$:
      000735 BF FE 02         [24] 3017 	cjne	r7,#0xfe,00267$
      000738 80 0E            [24] 3018 	sjmp	00118$
      00073A                       3019 00267$:
      00073A BF 00 2F         [24] 3020 	cjne	r7,#0x00,00121$
                           00073D  3021 	C$main.c$504$5$170 ==.
                                   3022 ;	main.c:504: uart0_writestr(uart_okflasherase);
      00073D 90r00r84         [24] 3023 	mov	dptr,#_bootloader_uart_okflasherase_1_162
      000740 75 F0 80         [24] 3024 	mov	b,#0x80
      000743 12r00r00         [24] 3025 	lcall	_uart0_writestr
                           000746  3026 	C$main.c$505$5$170 ==.
                                   3027 ;	main.c:505: break;
                           000746  3028 	C$main.c$507$5$170 ==.
                                   3029 ;	main.c:507: case -2:
      000746 80 8C            [24] 3030 	sjmp	00151$
      000748                       3031 00118$:
                           000748  3032 	C$main.c$508$5$170 ==.
                                   3033 ;	main.c:508: uart0_writestr(uart_errflashlock);
      000748 90r00r50         [24] 3034 	mov	dptr,#_bootloader_uart_errflashlock_1_162
      00074B 75 F0 80         [24] 3035 	mov	b,#0x80
      00074E 12r00r00         [24] 3036 	lcall	_uart0_writestr
                           000751  3037 	C$main.c$509$5$170 ==.
                                   3038 ;	main.c:509: break;
      000751 02r06rD4         [24] 3039 	ljmp	00151$
                           000754  3040 	C$main.c$511$5$170 ==.
                                   3041 ;	main.c:511: case -3:
      000754                       3042 00119$:
                           000754  3043 	C$main.c$512$5$170 ==.
                                   3044 ;	main.c:512: uart0_writestr(uart_errflashvector);
      000754 90r00r63         [24] 3045 	mov	dptr,#_bootloader_uart_errflashvector_1_162
      000757 75 F0 80         [24] 3046 	mov	b,#0x80
      00075A 12r00r00         [24] 3047 	lcall	_uart0_writestr
                           00075D  3048 	C$main.c$513$5$170 ==.
                                   3049 ;	main.c:513: break;
      00075D 02r06rD4         [24] 3050 	ljmp	00151$
                           000760  3051 	C$main.c$515$5$170 ==.
                                   3052 ;	main.c:515: case -4:
      000760                       3053 00120$:
                           000760  3054 	C$main.c$516$5$170 ==.
                                   3055 ;	main.c:516: uart0_writestr(uart_errflashvdd);
      000760 90r00r76         [24] 3056 	mov	dptr,#_bootloader_uart_errflashvdd_1_162
      000763 75 F0 80         [24] 3057 	mov	b,#0x80
      000766 12r00r00         [24] 3058 	lcall	_uart0_writestr
                           000769  3059 	C$main.c$517$5$170 ==.
                                   3060 ;	main.c:517: break;
      000769 02r06rD4         [24] 3061 	ljmp	00151$
                           00076C  3062 	C$main.c$519$5$170 ==.
                                   3063 ;	main.c:519: default:
      00076C                       3064 00121$:
                           00076C  3065 	C$main.c$520$5$170 ==.
                                   3066 ;	main.c:520: uart0_writestr(uart_errflashtimeout);
      00076C 90r00r3C         [24] 3067 	mov	dptr,#_bootloader_uart_errflashtimeout_1_162
      00076F 75 F0 80         [24] 3068 	mov	b,#0x80
      000772 12r00r00         [24] 3069 	lcall	_uart0_writestr
                           000775  3070 	C$main.c$523$4$169 ==.
                                   3071 ;	main.c:523: break;
      000775 02r06rD4         [24] 3072 	ljmp	00151$
                           000778  3073 	C$main.c$526$3$168 ==.
                                   3074 ;	main.c:526: case 'Z':
      000778                       3075 00123$:
                           000778  3076 	C$main.c$528$4$171 ==.
                                   3077 ;	main.c:528: int8_t st = check_app_erased();
      000778 12r02r1D         [24] 3078 	lcall	_check_app_erased
      00077B AF 82            [24] 3079 	mov	r7,dpl
                           00077D  3080 	C$main.c$529$4$171 ==.
                                   3081 ;	main.c:529: uart0_wait_txfree(63);
      00077D 75 82 3F         [24] 3082 	mov	dpl,#0x3f
      000780 12r00r00         [24] 3083 	lcall	_uart0_wait_txfree
                           000783  3084 	C$main.c$530$4$171 ==.
                                   3085 ;	main.c:530: switch (st) {
      000783 BF FD 02         [24] 3086 	cjne	r7,#0xfd,00270$
      000786 80 0F            [24] 3087 	sjmp	00125$
      000788                       3088 00270$:
      000788 BF 00 18         [24] 3089 	cjne	r7,#0x00,00126$
                           00078B  3090 	C$main.c$532$5$172 ==.
                                   3091 ;	main.c:532: uart0_writestr(uart_okflasherasecheck);
      00078B 90r00r95         [24] 3092 	mov	dptr,#_bootloader_uart_okflasherasecheck_1_162
      00078E 75 F0 80         [24] 3093 	mov	b,#0x80
      000791 12r00r00         [24] 3094 	lcall	_uart0_writestr
                           000794  3095 	C$main.c$533$5$172 ==.
                                   3096 ;	main.c:533: break;
      000794 02r06rD4         [24] 3097 	ljmp	00151$
                           000797  3098 	C$main.c$535$5$172 ==.
                                   3099 ;	main.c:535: case -3:
      000797                       3100 00125$:
                           000797  3101 	C$main.c$536$5$172 ==.
                                   3102 ;	main.c:536: uart0_writestr(uart_errflashvector);
      000797 90r00r63         [24] 3103 	mov	dptr,#_bootloader_uart_errflashvector_1_162
      00079A 75 F0 80         [24] 3104 	mov	b,#0x80
      00079D 12r00r00         [24] 3105 	lcall	_uart0_writestr
                           0007A0  3106 	C$main.c$537$5$172 ==.
                                   3107 ;	main.c:537: break;
      0007A0 02r06rD4         [24] 3108 	ljmp	00151$
                           0007A3  3109 	C$main.c$539$5$172 ==.
                                   3110 ;	main.c:539: default:
      0007A3                       3111 00126$:
                           0007A3  3112 	C$main.c$540$5$172 ==.
                                   3113 ;	main.c:540: uart0_writestr(uart_errflasherasecheck);
      0007A3 90r00rAC         [24] 3114 	mov	dptr,#_bootloader_uart_errflasherasecheck_1_162
      0007A6 75 F0 80         [24] 3115 	mov	b,#0x80
      0007A9 12r00r00         [24] 3116 	lcall	_uart0_writestr
                           0007AC  3117 	C$main.c$543$4$171 ==.
                                   3118 ;	main.c:543: break;
      0007AC 02r06rD4         [24] 3119 	ljmp	00151$
                           0007AF  3120 	C$main.c$546$3$168 ==.
                                   3121 ;	main.c:546: case 'R':
      0007AF                       3122 00128$:
                           0007AF  3123 	C$main.c$548$4$173 ==.
                                   3124 ;	main.c:548: uart0_wait_txfree(63);
      0007AF 75 82 3F         [24] 3125 	mov	dpl,#0x3f
      0007B2 12r00r00         [24] 3126 	lcall	_uart0_wait_txfree
                           0007B5  3127 	C$main.c$549$4$173 ==.
                                   3128 ;	main.c:549: if (jmp_vector == 0xFFFF) {
      0007B5 90 E3 FE         [24] 3129 	mov	dptr,#_jmp_vector
      0007B8 E4               [12] 3130 	clr	a
      0007B9 93               [24] 3131 	movc	a,@a+dptr
      0007BA FE               [12] 3132 	mov	r6,a
      0007BB 74 01            [12] 3133 	mov	a,#0x01
      0007BD 93               [24] 3134 	movc	a,@a+dptr
      0007BE FF               [12] 3135 	mov	r7,a
      0007BF BE FF 0F         [24] 3136 	cjne	r6,#0xff,00130$
      0007C2 BF FF 0C         [24] 3137 	cjne	r7,#0xff,00130$
                           0007C5  3138 	C$main.c$550$5$174 ==.
                                   3139 ;	main.c:550: uart0_writestr(uart_errrunapp);
      0007C5 90r00rDC         [24] 3140 	mov	dptr,#_bootloader_uart_errrunapp_1_162
      0007C8 75 F0 80         [24] 3141 	mov	b,#0x80
      0007CB 12r00r00         [24] 3142 	lcall	_uart0_writestr
                           0007CE  3143 	C$main.c$551$5$174 ==.
                                   3144 ;	main.c:551: break;
      0007CE 02r06rD4         [24] 3145 	ljmp	00151$
      0007D1                       3146 00130$:
                           0007D1  3147 	C$main.c$553$4$173 ==.
                                   3148 ;	main.c:553: uart0_writestr(uart_okrunapp);
      0007D1 90r00rC3         [24] 3149 	mov	dptr,#_bootloader_uart_okrunapp_1_162
      0007D4 75 F0 80         [24] 3150 	mov	b,#0x80
      0007D7 12r00r00         [24] 3151 	lcall	_uart0_writestr
                           0007DA  3152 	C$main.c$554$4$173 ==.
                                   3153 ;	main.c:554: uart0_wait_txfree(63);
      0007DA 75 82 3F         [24] 3154 	mov	dpl,#0x3f
      0007DD 12r00r00         [24] 3155 	lcall	_uart0_wait_txfree
                           0007E0  3156 	C$main.c$556$4$173 ==.
                                   3157 ;	main.c:556: while (0x44 & (uint8_t)~U0STATUS);
      0007E0                       3158 00131$:
      0007E0 E5 E5            [12] 3159 	mov	a,_U0STATUS
      0007E2 F4               [12] 3160 	cpl	a
      0007E3 FF               [12] 3161 	mov	r7,a
      0007E4 54 44            [12] 3162 	anl	a,#0x44
      0007E6 60 02            [24] 3163 	jz	00276$
      0007E8 80 F6            [24] 3164 	sjmp	00131$
      0007EA                       3165 00276$:
                           0007EA  3166 	C$main.c$557$4$173 ==.
                                   3167 ;	main.c:557: run_application();
      0007EA 12r00r00         [24] 3168 	lcall	_run_application
                           0007ED  3169 	C$main.c$558$4$173 ==.
                                   3170 ;	main.c:558: break;
      0007ED 02r06rD4         [24] 3171 	ljmp	00151$
                           0007F0  3172 	C$main.c$561$3$168 ==.
                                   3173 ;	main.c:561: case ':':
      0007F0                       3174 00134$:
                           0007F0  3175 	C$main.c$563$4$175 ==.
                                   3176 ;	main.c:563: int8_t st = parse_ihex();
      0007F0 12r04rD1         [24] 3177 	lcall	_parse_ihex
                           0007F3  3178 	C$main.c$564$4$175 ==.
                                   3179 ;	main.c:564: if (!st)
      0007F3 E5 82            [12] 3180 	mov	a,dpl
      0007F5 FF               [12] 3181 	mov	r7,a
      0007F6 70 03            [24] 3182 	jnz	00277$
      0007F8 02r06rD4         [24] 3183 	ljmp	00151$
      0007FB                       3184 00277$:
                           0007FB  3185 	C$main.c$566$4$175 ==.
                                   3186 ;	main.c:566: uart0_wait_txfree(63);
      0007FB 75 82 3F         [24] 3187 	mov	dpl,#0x3f
      0007FE 12r00r00         [24] 3188 	lcall	_uart0_wait_txfree
                           000801  3189 	C$main.c$567$4$175 ==.
                                   3190 ;	main.c:567: switch (st) {
      000801 BF F9 02         [24] 3191 	cjne	r7,#0xf9,00278$
      000804 80 53            [24] 3192 	sjmp	00142$
      000806                       3193 00278$:
      000806 BF FA 02         [24] 3194 	cjne	r7,#0xfa,00279$
      000809 80 42            [24] 3195 	sjmp	00141$
      00080B                       3196 00279$:
      00080B BF FB 02         [24] 3197 	cjne	r7,#0xfb,00280$
      00080E 80 31            [24] 3198 	sjmp	00140$
      000810                       3199 00280$:
      000810 BF FC 02         [24] 3200 	cjne	r7,#0xfc,00281$
      000813 80 20            [24] 3201 	sjmp	00139$
      000815                       3202 00281$:
      000815 BF FD 02         [24] 3203 	cjne	r7,#0xfd,00282$
      000818 80 0F            [24] 3204 	sjmp	00138$
      00081A                       3205 00282$:
      00081A BF FE 48         [24] 3206 	cjne	r7,#0xfe,00143$
                           00081D  3207 	C$main.c$569$5$176 ==.
                                   3208 ;	main.c:569: uart0_writestr(uart_errflashlock);
      00081D 90r00r50         [24] 3209 	mov	dptr,#_bootloader_uart_errflashlock_1_162
      000820 75 F0 80         [24] 3210 	mov	b,#0x80
      000823 12r00r00         [24] 3211 	lcall	_uart0_writestr
                           000826  3212 	C$main.c$570$5$176 ==.
                                   3213 ;	main.c:570: break;
      000826 02r06rD4         [24] 3214 	ljmp	00151$
                           000829  3215 	C$main.c$572$5$176 ==.
                                   3216 ;	main.c:572: case -3:
      000829                       3217 00138$:
                           000829  3218 	C$main.c$573$5$176 ==.
                                   3219 ;	main.c:573: uart0_writestr(uart_errhexinvalidchar);
      000829 90r00rF1         [24] 3220 	mov	dptr,#_bootloader_uart_errhexinvalidchar_1_162
      00082C 75 F0 80         [24] 3221 	mov	b,#0x80
      00082F 12r00r00         [24] 3222 	lcall	_uart0_writestr
                           000832  3223 	C$main.c$574$5$176 ==.
                                   3224 ;	main.c:574: break;
      000832 02r06rD4         [24] 3225 	ljmp	00151$
                           000835  3226 	C$main.c$576$5$176 ==.
                                   3227 ;	main.c:576: case -4:
      000835                       3228 00139$:
                           000835  3229 	C$main.c$577$5$176 ==.
                                   3230 ;	main.c:577: uart0_writestr(uart_errhexchksum);
      000835 90r01r0D         [24] 3231 	mov	dptr,#_bootloader_uart_errhexchksum_1_162
      000838 75 F0 80         [24] 3232 	mov	b,#0x80
      00083B 12r00r00         [24] 3233 	lcall	_uart0_writestr
                           00083E  3234 	C$main.c$578$5$176 ==.
                                   3235 ;	main.c:578: break;
      00083E 02r06rD4         [24] 3236 	ljmp	00151$
                           000841  3237 	C$main.c$580$5$176 ==.
                                   3238 ;	main.c:580: case -5:
      000841                       3239 00140$:
                           000841  3240 	C$main.c$581$5$176 ==.
                                   3241 ;	main.c:581: uart0_writestr(uart_errhexrectype);
      000841 90r01r26         [24] 3242 	mov	dptr,#_bootloader_uart_errhexrectype_1_162
      000844 75 F0 80         [24] 3243 	mov	b,#0x80
      000847 12r00r00         [24] 3244 	lcall	_uart0_writestr
                           00084A  3245 	C$main.c$582$5$176 ==.
                                   3246 ;	main.c:582: break;
      00084A 02r06rD4         [24] 3247 	ljmp	00151$
                           00084D  3248 	C$main.c$584$5$176 ==.
                                   3249 ;	main.c:584: case -6:
      00084D                       3250 00141$:
                           00084D  3251 	C$main.c$585$5$176 ==.
                                   3252 ;	main.c:585: uart0_writestr(uart_errhexflashwrite);
      00084D 90r01r48         [24] 3253 	mov	dptr,#_bootloader_uart_errhexflashwrite_1_162
      000850 75 F0 80         [24] 3254 	mov	b,#0x80
      000853 12r00r00         [24] 3255 	lcall	_uart0_writestr
                           000856  3256 	C$main.c$586$5$176 ==.
                                   3257 ;	main.c:586: break;
      000856 02r06rD4         [24] 3258 	ljmp	00151$
                           000859  3259 	C$main.c$588$5$176 ==.
                                   3260 ;	main.c:588: case -7:
      000859                       3261 00142$:
                           000859  3262 	C$main.c$589$5$176 ==.
                                   3263 ;	main.c:589: uart0_writestr(uart_errhexgarbagechar);
      000859 90r01r60         [24] 3264 	mov	dptr,#_bootloader_uart_errhexgarbagechar_1_162
      00085C 75 F0 80         [24] 3265 	mov	b,#0x80
      00085F 12r00r00         [24] 3266 	lcall	_uart0_writestr
                           000862  3267 	C$main.c$590$5$176 ==.
                                   3268 ;	main.c:590: break;
      000862 02r06rD4         [24] 3269 	ljmp	00151$
                           000865  3270 	C$main.c$592$5$176 ==.
                                   3271 ;	main.c:592: default:
      000865                       3272 00143$:
                           000865  3273 	C$main.c$593$5$176 ==.
                                   3274 ;	main.c:593: uart0_writestr(uart_errflashtimeout);
      000865 90r00r3C         [24] 3275 	mov	dptr,#_bootloader_uart_errflashtimeout_1_162
      000868 75 F0 80         [24] 3276 	mov	b,#0x80
      00086B 12r00r00         [24] 3277 	lcall	_uart0_writestr
                           00086E  3278 	C$main.c$596$4$175 ==.
                                   3279 ;	main.c:596: break;
      00086E 02r06rD4         [24] 3280 	ljmp	00151$
                           000871  3281 	C$main.c$599$3$168 ==.
                                   3282 ;	main.c:599: case 'V':
      000871                       3283 00145$:
                           000871  3284 	C$main.c$601$4$177 ==.
                                   3285 ;	main.c:601: uint16_t vdd = measurevdd();
      000871 12r00r6A         [24] 3286 	lcall	_measurevdd
      000874 AE 82            [24] 3287 	mov	r6,dpl
      000876 AF 83            [24] 3288 	mov	r7,dph
                           000878  3289 	C$main.c$602$4$177 ==.
                                   3290 ;	main.c:602: uart0_wait_txfree(63);
      000878 75 82 3F         [24] 3291 	mov	dpl,#0x3f
      00087B 12r00r00         [24] 3292 	lcall	_uart0_wait_txfree
                           00087E  3293 	C$main.c$603$4$177 ==.
                                   3294 ;	main.c:603: uart0_writestr(uart_vdd1);
      00087E 90r01r81         [24] 3295 	mov	dptr,#_bootloader_uart_vdd1_1_162
      000881 75 F0 80         [24] 3296 	mov	b,#0x80
      000884 C0 07            [24] 3297 	push	ar7
      000886 C0 06            [24] 3298 	push	ar6
      000888 12r00r00         [24] 3299 	lcall	_uart0_writestr
      00088B D0 06            [24] 3300 	pop	ar6
      00088D D0 07            [24] 3301 	pop	ar7
                           00088F  3302 	C$main.c$604$4$177 ==.
                                   3303 ;	main.c:604: uart0_writenum16(vdd >> 8, 1, 0);
      00088F 8F 82            [24] 3304 	mov	dpl,r7
      000891 75 83 00         [24] 3305 	mov	dph,#0x00
      000894 C0 07            [24] 3306 	push	ar7
      000896 C0 06            [24] 3307 	push	ar6
      000898 E4               [12] 3308 	clr	a
      000899 C0 E0            [24] 3309 	push	acc
      00089B 04               [12] 3310 	inc	a
      00089C C0 E0            [24] 3311 	push	acc
      00089E 12r00r00         [24] 3312 	lcall	_uart0_writenum16
      0008A1 15 81            [12] 3313 	dec	sp
      0008A3 15 81            [12] 3314 	dec	sp
      0008A5 D0 06            [24] 3315 	pop	ar6
      0008A7 D0 07            [24] 3316 	pop	ar7
                           0008A9  3317 	C$main.c$605$4$177 ==.
                                   3318 ;	main.c:605: uart0_tx('.');
      0008A9 75 82 2E         [24] 3319 	mov	dpl,#0x2e
      0008AC 12r00r00         [24] 3320 	lcall	_uart0_tx
                           0008AF  3321 	C$main.c$606$4$177 ==.
                                   3322 ;	main.c:606: vdd &= 0xff;
      0008AF 7F 00            [12] 3323 	mov	r7,#0x00
                           0008B1  3324 	C$main.c$607$1$162 ==.
                                   3325 ;	main.c:607: vdd *= 100;
      0008B1 8E*00            [24] 3326 	mov	__mulint_PARM_2,r6
      0008B3 8F*01            [24] 3327 	mov	(__mulint_PARM_2 + 1),r7
      0008B5 90 00 64         [24] 3328 	mov	dptr,#0x0064
      0008B8 12r00r00         [24] 3329 	lcall	__mulint
      0008BB AF 83            [24] 3330 	mov	r7,dph
                           0008BD  3331 	C$main.c$608$4$177 ==.
                                   3332 ;	main.c:608: uart0_writenum16(vdd >> 8, 2, WRNUM_PADZERO);
      0008BD 8F 82            [24] 3333 	mov	dpl,r7
      0008BF 75 83 00         [24] 3334 	mov	dph,#0x00
      0008C2 74 08            [12] 3335 	mov	a,#0x08
      0008C4 C0 E0            [24] 3336 	push	acc
      0008C6 74 02            [12] 3337 	mov	a,#0x02
      0008C8 C0 E0            [24] 3338 	push	acc
      0008CA 12r00r00         [24] 3339 	lcall	_uart0_writenum16
      0008CD 15 81            [12] 3340 	dec	sp
      0008CF 15 81            [12] 3341 	dec	sp
                           0008D1  3342 	C$main.c$609$4$177 ==.
                                   3343 ;	main.c:609: uart0_writestr(uart_vdd2);
      0008D1 90r01r86         [24] 3344 	mov	dptr,#_bootloader_uart_vdd2_1_162
      0008D4 75 F0 80         [24] 3345 	mov	b,#0x80
      0008D7 12r00r00         [24] 3346 	lcall	_uart0_writestr
                           0008DA  3347 	C$main.c$610$4$177 ==.
                                   3348 ;	main.c:610: break;
      0008DA 02r06rD4         [24] 3349 	ljmp	00151$
                           0008DD  3350 	C$main.c$613$3$168 ==.
                                   3351 ;	main.c:613: default:
      0008DD                       3352 00146$:
                           0008DD  3353 	C$main.c$615$3$168 ==.
                                   3354 ;	main.c:615: uart0_rxadvance(uart0_rxcount());
      0008DD 12r00r00         [24] 3355 	lcall	_uart0_rxcount
      0008E0 12r00r00         [24] 3356 	lcall	_uart0_rxadvance
                           0008E3  3357 	C$main.c$616$3$168 ==.
                                   3358 ;	main.c:616: uart0_wait_txfree(63);
      0008E3 75 82 3F         [24] 3359 	mov	dpl,#0x3f
      0008E6 12r00r00         [24] 3360 	lcall	_uart0_wait_txfree
                           0008E9  3361 	C$main.c$617$3$168 ==.
                                   3362 ;	main.c:617: uart0_writestr(uart_errunknowncmd);
      0008E9 90r00r26         [24] 3363 	mov	dptr,#_bootloader_uart_errunknowncmd_1_162
      0008EC 75 F0 80         [24] 3364 	mov	b,#0x80
      0008EF 12r00r00         [24] 3365 	lcall	_uart0_writestr
                           0008F2  3366 	C$main.c$619$2$167 ==.
                                   3367 ;	main.c:619: }
      0008F2 02r06rD4         [24] 3368 	ljmp	00151$
                           0008F5  3369 	C$main.c$621$1$162 ==.
                           0008F5  3370 	XG$bootloader$0$0 ==.
      0008F5 22               [24] 3371 	ret
                                   3372 	.area CSEG    (CODE)
                                   3373 	.area CONST   (CODE)
                           00E3FE  3374 G$jmp_vector$0$0 == 0xe3fe
                           00E3FE  3375 _jmp_vector	=	0xe3fe
                           000000  3376 Lmain.write_banner$uart_banner$1$158 == .
      000000                       3377 _write_banner_uart_banner_1_158:
      000000 41 58 38 30 35 32 20  3378 	.ascii "AX8052 Bootloader V1.1 Checksum 0x"
             42 6F 6F 74 6C 6F 61
             64 65 72 20 56 31 2E
             31 20 43 68 65 63 6B
             73 75 6D 20 30 78
      000022 00                    3379 	.db 0x00
                           000023  3380 Lmain.write_banner$uart_crlf$1$158 == .
      000023                       3381 _write_banner_uart_crlf_1_158:
      000023 0D                    3382 	.db 0x0d
      000024 0A                    3383 	.db 0x0a
      000025 00                    3384 	.db 0x00
                           000026  3385 Lmain.bootloader$uart_errunknowncmd$1$162 == .
      000026                       3386 _bootloader_uart_errunknowncmd_1_162:
      000026 45 52 52 2D 55 6E 6B  3387 	.ascii "ERR-Unknown Command"
             6E 6F 77 6E 20 43 6F
             6D 6D 61 6E 64
      000039 0D                    3388 	.db 0x0d
      00003A 0A                    3389 	.db 0x0a
      00003B 00                    3390 	.db 0x00
                           00003C  3391 Lmain.bootloader$uart_errflashtimeout$1$162 == .
      00003C                       3392 _bootloader_uart_errflashtimeout_1_162:
      00003C 45 52 52 2D 46 4C 41  3393 	.ascii "ERR-FLASH Timeout"
             53 48 20 54 69 6D 65
             6F 75 74
      00004D 0D                    3394 	.db 0x0d
      00004E 0A                    3395 	.db 0x0a
      00004F 00                    3396 	.db 0x00
                           000050  3397 Lmain.bootloader$uart_errflashlock$1$162 == .
      000050                       3398 _bootloader_uart_errflashlock_1_162:
      000050 45 52 52 2D 46 4C 41  3399 	.ascii "ERR-FLASH Locked"
             53 48 20 4C 6F 63 6B
             65 64
      000060 0D                    3400 	.db 0x0d
      000061 0A                    3401 	.db 0x0a
      000062 00                    3402 	.db 0x00
                           000063  3403 Lmain.bootloader$uart_errflashvector$1$162 == .
      000063                       3404 _bootloader_uart_errflashvector_1_162:
      000063 45 52 52 2D 46 4C 41  3405 	.ascii "ERR-FLASH Vector"
             53 48 20 56 65 63 74
             6F 72
      000073 0D                    3406 	.db 0x0d
      000074 0A                    3407 	.db 0x0a
      000075 00                    3408 	.db 0x00
                           000076  3409 Lmain.bootloader$uart_errflashvdd$1$162 == .
      000076                       3410 _bootloader_uart_errflashvdd_1_162:
      000076 45 52 52 2D 56 44 44  3411 	.ascii "ERR-VDD low"
             20 6C 6F 77
      000081 0D                    3412 	.db 0x0d
      000082 0A                    3413 	.db 0x0a
      000083 00                    3414 	.db 0x00
                           000084  3415 Lmain.bootloader$uart_okflasherase$1$162 == .
      000084                       3416 _bootloader_uart_okflasherase_1_162:
      000084 4F 4B 2D 46 4C 41 53  3417 	.ascii "OK-FLASH Erase"
             48 20 45 72 61 73 65
      000092 0D                    3418 	.db 0x0d
      000093 0A                    3419 	.db 0x0a
      000094 00                    3420 	.db 0x00
                           000095  3421 Lmain.bootloader$uart_okflasherasecheck$1$162 == .
      000095                       3422 _bootloader_uart_okflasherasecheck_1_162:
      000095 4F 4B 2D 46 4C 41 53  3423 	.ascii "OK-FLASH Erase Check"
             48 20 45 72 61 73 65
             20 43 68 65 63 6B
      0000A9 0D                    3424 	.db 0x0d
      0000AA 0A                    3425 	.db 0x0a
      0000AB 00                    3426 	.db 0x00
                           0000AC  3427 Lmain.bootloader$uart_errflasherasecheck$1$162 == .
      0000AC                       3428 _bootloader_uart_errflasherasecheck_1_162:
      0000AC 45 52 52 2D 46 4C 41  3429 	.ascii "ERR-FLASH not Erased"
             53 48 20 6E 6F 74 20
             45 72 61 73 65 64
      0000C0 0D                    3430 	.db 0x0d
      0000C1 0A                    3431 	.db 0x0a
      0000C2 00                    3432 	.db 0x00
                           0000C3  3433 Lmain.bootloader$uart_okrunapp$1$162 == .
      0000C3                       3434 _bootloader_uart_okrunapp_1_162:
      0000C3 4F 4B 2D 52 75 6E 6E  3435 	.ascii "OK-Running Application"
             69 6E 67 20 41 70 70
             6C 69 63 61 74 69 6F
             6E
      0000D9 0D                    3436 	.db 0x0d
      0000DA 0A                    3437 	.db 0x0a
      0000DB 00                    3438 	.db 0x00
                           0000DC  3439 Lmain.bootloader$uart_errrunapp$1$162 == .
      0000DC                       3440 _bootloader_uart_errrunapp_1_162:
      0000DC 45 52 52 2D 6E 6F 20  3441 	.ascii "ERR-no Application"
             41 70 70 6C 69 63 61
             74 69 6F 6E
      0000EE 0D                    3442 	.db 0x0d
      0000EF 0A                    3443 	.db 0x0a
      0000F0 00                    3444 	.db 0x00
                           0000F1  3445 Lmain.bootloader$uart_errhexinvalidchar$1$162 == .
      0000F1                       3446 _bootloader_uart_errhexinvalidchar_1_162:
      0000F1 45 52 52 2D 49 6E 76  3447 	.ascii "ERR-Invalid Hex Character"
             61 6C 69 64 20 48 65
             78 20 43 68 61 72 61
             63 74 65 72
      00010A 0D                    3448 	.db 0x0d
      00010B 0A                    3449 	.db 0x0a
      00010C 00                    3450 	.db 0x00
                           00010D  3451 Lmain.bootloader$uart_errhexchksum$1$162 == .
      00010D                       3452 _bootloader_uart_errhexchksum_1_162:
      00010D 45 52 52 2D 48 65 78  3453 	.ascii "ERR-Hex Checksum Error"
             20 43 68 65 63 6B 73
             75 6D 20 45 72 72 6F
             72
      000123 0D                    3454 	.db 0x0d
      000124 0A                    3455 	.db 0x0a
      000125 00                    3456 	.db 0x00
                           000126  3457 Lmain.bootloader$uart_errhexrectype$1$162 == .
      000126                       3458 _bootloader_uart_errhexrectype_1_162:
      000126 45 52 52 2D 55 6E 6B  3459 	.ascii "ERR-Unknown Record Type ignored"
             6E 6F 77 6E 20 52 65
             63 6F 72 64 20 54 79
             70 65 20 69 67 6E 6F
             72 65 64
      000145 0D                    3460 	.db 0x0d
      000146 0A                    3461 	.db 0x0a
      000147 00                    3462 	.db 0x00
                           000148  3463 Lmain.bootloader$uart_errhexflashwrite$1$162 == .
      000148                       3464 _bootloader_uart_errhexflashwrite_1_162:
      000148 45 52 52 2D 46 4C 41  3465 	.ascii "ERR-FLASH write error"
             53 48 20 77 72 69 74
             65 20 65 72 72 6F 72
      00015D 0D                    3466 	.db 0x0d
      00015E 0A                    3467 	.db 0x0a
      00015F 00                    3468 	.db 0x00
                           000160  3469 Lmain.bootloader$uart_errhexgarbagechar$1$162 == .
      000160                       3470 _bootloader_uart_errhexgarbagechar_1_162:
      000160 45 52 52 2D 47 61 72  3471 	.ascii "ERR-Garbage Characters ignored"
             62 61 67 65 20 43 68
             61 72 61 63 74 65 72
             73 20 69 67 6E 6F 72
             65 64
      00017E 0D                    3472 	.db 0x0d
      00017F 0A                    3473 	.db 0x0a
      000180 00                    3474 	.db 0x00
                           000181  3475 Lmain.bootloader$uart_vdd1$1$162 == .
      000181                       3476 _bootloader_uart_vdd1_1_162:
      000181 56 44 44 20           3477 	.ascii "VDD "
      000185 00                    3478 	.db 0x00
                           000186  3479 Lmain.bootloader$uart_vdd2$1$162 == .
      000186                       3480 _bootloader_uart_vdd2_1_162:
      000186 56                    3481 	.ascii "V"
      000187 0D                    3482 	.db 0x0d
      000188 0A                    3483 	.db 0x0a
      000189 00                    3484 	.db 0x00
                                   3485 	.area XINIT   (CODE)
                                   3486 	.area CABS    (ABS,CODE)
